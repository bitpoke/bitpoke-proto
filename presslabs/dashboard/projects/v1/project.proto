syntax = "proto3";

package presslabs.dashboard.projects.v1;

option (gogoproto.equal_all) = true; // Required for test generation
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true; // Required for test generation
option (gogoproto.protosizer_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;
option go_package = "github.com/presslabs/dashboard-go/pkg/project/v1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

// Projects represents an project within the presslabs dashboard
// context
message Project {
  // Fully qualified project name in the form projects/{project_name}.
  // `project_name` is a valid DNS label (RFC 1123) with maximum
  // length of 48 characters.
  // Name is read-only.
  string name = 1 [(gogoproto.casttype) = "Name"];
  // display_name for the project
  string display_name = 2;
  // Organization name. The organization is immutable.
  // This field is read-only.
  string organization = 3 [(gogoproto.casttype) = "github.com/presslabs/dashboard-go/pkg/organization/v1.Name"];
  // Time when the project was created.
  // This field is read-only.
  google.protobuf.Timestamp created_at = 4;
  // Icon for project. Should be an absolute url or a data url
  string icon_url = 5;
  // Service account that will be used for the project's sites/mysql by default.
  string default_service_account = 6;
  // [Output only] Number of sites in the project.
  int32 sites_count = 7;
  // The frequency at which the MySQL operator will schedule cluster backups
  // The expected format is the cron format with 6 places (0 0 0 1 */3 *)
  string mysql_backups_cron = 8;
  // The number of MySQL backups the server should retain before deletion
  uint32 mysql_backups_retain_count = 9;
}

message MySQLBackup {
  // Fully qualified backup name in the form projects/{project_name}/backups/{backup_name}.
  // `backup_name` is a valid DNS label (RFC 1123) with maximum
  // length of 48 characters.
  // Name is read-only.
  string name = 1 [(gogoproto.casttype) = "Name"];
  // [Output only] The URL from which the backup can be downloaded
  string url = 2;
  // [Output only] The name of the cluster the backup has been performed on
  string cluster_name = 3;
  // [Output only] A flag that denotes whether the backup is a recurrent one or not
  bool is_recurrent = 4;
  // [Output only] A flag that denotes whether the backup has been completed or not
  bool is_completed = 5;
  // [Output only] Time when the backup was requested.
  google.protobuf.Timestamp requested_at = 6;
  // [Output only] Time when the backup was completed.
  google.protobuf.Timestamp completed_at = 7;
}

message GetProjectRequest {
  // Resource name of the project to fetch in the form projects/{project_name}
  // `project_name` MUST be a valid DNS label (RFC 1123)
  // with maximum length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}

message ListProjectsRequest {
  // Parent organization, for example "org/{organization_name}".
  // This parameter overrides the organization passed as metadata.
  // If not specified as metadata, the parent is a required parameter.
  string parent = 1 [(gogoproto.casttype) = "github.com/presslabs/dashboard-go/pkg/organization/v1.Name"];
  // Maximum number of items to return.
  int32 page_size = 2;
  // next_page_token value returned from a previous List request, if
  // any.
  string page_token = 3;
}

message ListProjectsResponse {
  repeated Project projects = 1 [(gogoproto.nullable) = false];
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message ListProjectBackupsRequest {
  // Parent project to list backups for. Eg. projects/{project_name}
  string parent = 1;
  // Maximum number of items to return.
  int32 page_size = 2;
  // next_page_token value returned from a previous List request, if any.
  string page_token = 3;
}

message ListProjectBackupsResponse {
  repeated MySQLBackup mysql_backups = 1 [(gogoproto.nullable) = false];
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message CreateProjectRequest {
  // Parent organization, for example "org/{organization_name}".
  // This parameter overrides the organization passed as metadata.
  // If not specified as metadata, the parent is a required parameter.
  string parent = 1 [(gogoproto.casttype) = "github.com/presslabs/dashboard-go/pkg/organization/v1.Name"];
  // Project resource to create
  Project project = 3 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message UpdateProjectRequest {
  // New definition of the project. It must include
  // a `name` , `organization` and `display_name` field.
  // The other fields will be ignored.
  Project project = 1 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
  // Fields to be updated.
  // Only the `display_name` can be updated.
  google.protobuf.FieldMask update_mask = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message DeleteProjectRequest {
  // Resource name of the project to delete in the form projects/{project_name}
  // `project_name` MUST be a valid DNS label (RFC 1123)
  // with maximum length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}

// ProjectsService allow managing projects
service ProjectsService {
  // CreateProject creates a new project
  rpc CreateProject(CreateProjectRequest) returns (Project);
  // GetProject fetches an project by it's name
  rpc GetProject(GetProjectRequest) returns (Project);
  // UpdateProject updates an project details
  rpc UpdateProject(UpdateProjectRequest) returns (Project);
  // DeleteProject deletes an project by it's name
  rpc DeleteProject(DeleteProjectRequest) returns (google.protobuf.Empty);
  // ListProjects list projects
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse);
}
