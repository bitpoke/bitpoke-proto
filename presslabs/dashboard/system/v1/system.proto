syntax = "proto3";

package presslabs.dashboard.systems.v1;

option (gogoproto.equal_all) = true; // Required for test generation
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true; // Required for test generation
option (gogoproto.protosizer_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;
option go_package = "github.com/presslabs/dashboard-go/pkg/system/v1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "presslabs/dashboard/affinity/v1/affinity.proto";
import "presslabs/dashboard/conditions/v1/condition.proto";
import "presslabs/dashboard/toleration/v1/toleration.proto";

// SystemStatus contains system components status
message SystemStatus {
  ApplicationStatus stack = 1 [(gogoproto.nullable) = false];
  ApplicationStatus dashboard = 2 [(gogoproto.nullable) = false];
  ApplicationStatus config_connector = 3 [(gogoproto.nullable) = false];
  AuthStatus auth = 4 [(gogoproto.nullable) = false];
  CRDStatus crd = 5 [(gogoproto.nullable) = false];
}

// ApplicationStatus is the status for an application
message ApplicationStatus {
  repeated ComponentStatus components = 1 [(gogoproto.nullable) = false];
  repeated presslabs.dashboard.conditions.v1.Condition conditions = 2 [(gogoproto.nullable) = false];
  // Link for more information about the component status.
  string link = 3;
}

// Component contains a name, a namespace, a kind and a link
message Component {
  // K8s resource name.
  string name = 1 [(gogoproto.casttype) = "ComponentName"];
  // K8s resource namespace.
  string namespace = 2 [(gogoproto.casttype) = "ComponentNamespace"];
  // The resource kind.
  string kind = 3;
  // The link for more information about the component status.
  string link = 4;
}

// ComponentStatus is the status for the dashboard component
message ComponentStatus {
  enum Status {
    // Not set.
    UNSPECIFIED = 0;
    // Component status is unknown.
    UNKNOWN = 1;
    // component status is ready.
    READY = 2;
    // Component status is in progress.
    IN_PROGRESS = 3;
  }
  // K8s component.
  Component component = 1 [(gogoproto.nullable) = false];
  // The component status.
  Status status = 2;
}

// AuthStatus is the status for the authentication system
message AuthStatus {
  string oidc_issuer = 1;
  repeated presslabs.dashboard.conditions.v1.Condition conditions = 2 [(gogoproto.nullable) = false];
}

message UpdateAuthConfigurationRequest {
  AuthConfiguration configuration = 1 [(gogoproto.nullable) = false];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message AuthConfiguration {
  string oidc_issuer = 1;
  string oidc_client_secret = 2;
  string oidc_client_id = 3;
}

message UpdateLetsEncryptConfigurationRequest {
  LetsEncryptConfiguration configuration = 1 [(gogoproto.nullable) = false];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message LetsEncryptConfiguration {
  // The email for this account.
  string email = 1;
  // The ACME server URL.
  string server = 2;
}

message ConfigConnectorConfiguration {
  // The google cloud shell link to install the google config connector.
  string install_link = 1;
  // The google cloud shell link to nuinstall the google config connector.
  string uninstall_link = 2;
}

// CRDStatus is the status of CRDs used directly by the dashboard
message CRDStatus {
  // A list of CRD names that were not found
  repeated string not_found = 1;
  // A list of CRDs that were found, but had a version not within the expected bounds
  repeated CRD mismatching_versions = 2 [(gogoproto.nullable) = false];
  repeated presslabs.dashboard.conditions.v1.Condition conditions = 3 [(gogoproto.nullable) = false];
}

// CRD contains data about a Kubernetes Custom Resource Definition
message CRD {
  // The CRD name
  string name = 1;
  // The version the resource belongs in
  string version = 2;
  // The lower bound of the accepted versions
  string lower_version_bound = 3;
  // The upper bound of the accepted versions
  string upper_version_bound = 4;
}

// AdminUser is an admin user
message AdminUser {
  string email = 1;
}

message AdminUsersResponse {
  repeated AdminUser admin_users = 1 [(gogoproto.nullable) = false];
}

message UpdateAdminUsersRequest {
  repeated AdminUser admin_users = 1 [(gogoproto.nullable) = false];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message ComponentScheduling {
  // K8s component to which the scheduling rules apply.
  Component component = 1 [(gogoproto.nullable) = false];
  // System's Affinity
  presslabs.dashboard.affinity.v1.Affinity affinity = 2;
  // System's Tolerations
  repeated presslabs.dashboard.toleration.v1.Toleration tolerations = 3 [(gogoproto.nullable) = false];
}

message GetComponentSchedulingRequest {
  // K8s component to fetch rules for.
  Component component = 1 [(gogoproto.nullable) = false];
}

message UpdateComponentSchedulingRequest {
  // Component scheduling settings.
  ComponentScheduling component_scheduling = 1 [(gogoproto.nullable) = false];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message ListComponentSchedulingsRequest {
  // Maximum number of items to return.
  int32 page_size = 1;
  // Next_page_token value returned from a previous List request, if any.
  string page_token = 2;
}

message ListComponentSchedulingsResponse {
  repeated ComponentScheduling component_schedulings = 1 [(gogoproto.nullable) = false];
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

// SystemStatusesService allow managing system components
service SystemStatusesService {
  // GetSystemStatus fetches a dashboard installer
  rpc GetSystemStatus(google.protobuf.Empty) returns (SystemStatus);
  // GetAuthConfiguration fetches the dashboard auth configuration
  rpc GetAuthConfiguration(google.protobuf.Empty) returns (AuthConfiguration);
  // UpdateAuthConfiguration updates the dashboard auth configuration
  rpc UpdateAuthConfiguration(UpdateAuthConfigurationRequest) returns (AuthConfiguration);
  // GetLetsEncryptConfiguration fetches the LetsEncrypt configuration
  rpc GetLetsEncryptConfiguration(google.protobuf.Empty) returns (LetsEncryptConfiguration);
  // UpdateLetsEncryptConfiguration updates the LetsEncrypt configuration
  rpc UpdateLetsEncryptConfiguration(UpdateLetsEncryptConfigurationRequest) returns (LetsEncryptConfiguration);
  // GetConfigConnectorConfiguration fetches the config connector configuration
  rpc GetConfigConnectorConfiguration(google.protobuf.Empty) returns (ConfigConnectorConfiguration);
  // GetAdminUsers fetches the admin users
  rpc GetAdminUsers(google.protobuf.Empty) returns (AdminUsersResponse);
  // UpdateAdminUsers updates the admin users
  rpc UpdateAdminUsers(UpdateAdminUsersRequest) returns (AdminUsersResponse);
  // GetComponentScheduling fetches the component's scheduling configuration
  rpc GetComponentScheduling(GetComponentSchedulingRequest) returns (ComponentScheduling);
  // UpdateComponentScheduling updates component's scheduling configuration
  rpc UpdateComponentScheduling(UpdateComponentSchedulingRequest) returns (ComponentScheduling);
  // ListComponentSchedulings lists component's scheduling configurations
  rpc ListComponentSchedulings(ListComponentSchedulingsRequest) returns (ListComponentSchedulingsResponse);
}
