syntax = "proto3";

package presslabs.dashboard.smpts.v1;

option (gogoproto.equal_all) = true; // Required for test generation
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true; // Required for test generation
option (gogoproto.protosizer_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;
option go_package = "github.com/presslabs/dashboard-go/pkg/smtp/v1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

// Smtp contains a host, a port and a tls for smtp variable
message Smtp {
  // Fully qualified smtp name in the form
  // smpts/{smtp_name}.
  // `smtp_name` is a valid DNS label (RFC 1123) with maximum
  // length of 48 characters.
  // Name is read-only.
  string name = 1 [(gogoproto.casttype) = "Name"];
  // Smtp's host.
  string host = 2;
  // Smtp's port.
  string port = 3;
  // User's name
  string user_name = 4;
  // User's password
  string user_password = 5;
  // Smtp's tls.
  string tls = 6;
  // Smtp's start tls
  string start_tls = 7;
}

message GetSmtpRequest {
  // Resource name of the smtp to fetch in the form
  // smtps/{smtp_name}.
  // `smtp_name` MUST be a valid DNS label (RFC 1123)
  // with maximum length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}

message UpdateSmtpRequest {
  // New definition of the smtp. It must include a `name`.
  Smtp smtp = 1 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message DeleteSmtpRequest {
  // Resource name of the smtp to delete in the form
  // smtps/{smtp_name}.
  // `smtp_name` MUST be a valid DNS label (RFC 1123)
  // with maximum length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}

message ListSmtpsRequest {
  // Parent's smtps, for example "site/{site_name}".
  string parent = 1 [(gogoproto.casttype) = "github.com/presslabs/dashboard-go/pkg/site/v1.Name"];
  // Maximum number of items to return.
  int32 page_size = 2;
  // Next_page_token value returned from a previous List request, if
  // any.
  string page_token = 3;
}

message ListSmtpsResponse {
  repeated Smtp smtps = 1 [(gogoproto.nullable) = false];
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

// SmtpsService allow managing smtps
service SmtpsService {
  // GetSmtp fetches an smtp by it's name
  rpc GetSmtp(GetSmtpRequest) returns (Smtp);
  // UpdateSmtp updates an smtp details
  rpc UpdateSmtp(UpdateSmtpRequest) returns (Smtp);
  // DeleteSmtp deletes an smtp by it's name
  rpc DeleteSmtp(DeleteSmtpRequest) returns (google.protobuf.Empty);
  // ListSmtps list Smtps
  rpc ListSmtps(ListSmtpsRequest) returns (ListSmtpsResponse);
}
