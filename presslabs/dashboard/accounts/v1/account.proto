syntax = "proto3";

package presslabs.dashboard.accounts.v1;

option (gogoproto.equal_all) = true; // Required for test generation
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true; // Required for test generation
option (gogoproto.protosizer_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;
option go_package = "github.com/presslabs/dashboard-go/pkg/account/v1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// Account represents a collaboration account for an account within the Presslabs
// dashboard context
message Account {
  // [Output only] The fully qualified account name in the form iam/accounts/{account_name}.
  // The `account_name` is a valid DNS label (RFC 1123) with maximum
  // length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
  // The user's email address
  string email = 2;
  // The unique handle used to identify the account in the SSO provider's database
  string id = 3;
  // The user's first name
  string first_name = 4;
  // The user's last name
  string last_name = 5;
  // A URL poiting to the user's profile picture
  string profile_picture = 6;
}

message GetAccountRequest {
  // The resource name of the account to fetch in the form iam/accounts/{account_name}
  // The `account_name` MUST be a valid DNS label (RFC 1123) with maximum length
  // of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}

message ListAccountsRequest {
  // The parent organization, for example "organization/{organization_name}".
  string parent = 1 [(gogoproto.casttype) = "github.com/presslabs/dashboard-go/pkg/organization/v1.Name"];
  // The maximum number of items to return.
  int32 page_size = 2;
  // The next_page_token value returned from a previous List request, if any.
  string page_token = 3;
}

message ListAccountsResponse {
  repeated Account accounts = 1 [(gogoproto.nullable) = false];
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message DeleteAccountRequest {
  // The resource name of the account to be revoked (and deleted) in the form
  // iam/accounts/{account_name}
  // The `account_name` MUST be a valid DNS label (RFC 1123)
  // with maximum length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}


// AccountsService allows managing accounts
service AccountsService {
  // GetAccount fetches an account by it's name
  rpc GetAccount(GetAccountRequest) returns (Account);
  // ListAccounts list accounts
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);
}
