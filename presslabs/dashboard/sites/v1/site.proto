syntax = "proto3";

package presslabs.dashboard.sites.v1;

option (gogoproto.equal_all) = true; // Required for test generation
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true; // Required for test generation
option (gogoproto.protosizer_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;
option go_package = "github.com/presslabs/dashboard-go/pkg/site/v1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "presslabs/dashboard/api/event/v1/event.proto";

// Site represents an site within the presslabs dashboard context
message Site {
  // The current status of the site.
  enum Status {
    // Not set.
    UNSPECIFIED = 0;
    // The PROVISIONING state indicates the site is being created.
    PROVISIONING = 1;
    // The RUNNING state indicates the site has been provisioned and is fully
    // usable.
    RUNNING = 2;
    // The ERROR state indicates the site may be unusable. Details
    // can be found in the `statusMessage` field.
    ERROR = 3;
  }
  // Fully qualified site name in the form
  // projects/super-awesome/sites/{site_name}.
  // `site_name` is a valid DNS label (RFC 1123) with maximum
  // length of 48 characters.
  // Name is read-only
  string name = 1 [(gogoproto.casttype) = "Name"];
  // Wordpress image
  string wordpress_image = 3;
  // Site endpoints
  repeated Endpoint endpoints = 4 [deprecated = true];
  // [Output only] Site's allocated resource
  repeated ResourceAllocation resources = 7;
  // [Output only] Current status of this site.
  Status status = 5 [deprecated = true];
  // [Output only] Additional information about the current status of this
  // site, if available.
  string status_message = 6;
  // Git_repository_origin is the source of truth, in regards to the site's code.
  // For now, it needs to be a public git repository, that can be cloned via git, ssh and http.
  string git_repository_origin = 8;
  // [OUTPUT_ONLY] The git_repository_deployed_ref will point to the
  // Git reference targeted for deployment.
  string git_repository_deployed_ref = 9;
  // git_repository_ref is git reference desired for deployment.
  // It can be a commit, a tag or a branch.
  // If it's a branch, the system will follow that branch's HEAD, and the actual
  // reference targeted for deployment is exposed in `git_repository_deployed_ref`.
  // If it's a commit or tag, the `git_repository_deployed_ref` will point to that reference.
  string git_repository_ref = 10;
  // [Output only] Site's fully-qualified wp-admin URL
  string wp_admin_url = 11;
  // List of environment variables
  EnvVarList env_vars = 14;
  // Time when the site was created.
  // This field is read-only.
  google.protobuf.Timestamp created_at = 15;
  // SMTP credentials.
  SMTP smtp = 16;
  // [Output only] WordPress resource name. E.g.: `presslabs-com-12fgv`
  string kubernetes_name = 17;
  // [Output only] Project namespace name.
  string kubernetes_namespace = 18;
  // Autoscaler settings
  Autoscaler autoscaler = 19;
  // Service account
  string service_account = 20;
  // Storage bucket
  StorageBucket storage_bucket = 21;
  // Google Project ID
  string google_project_id = 22;
  // [Write only] Bootstrap details.
  BootstrapDetails bootstrap = 23;
  // [Output only] Routes contains site domains and paths
  repeated Route routes = 24 [(gogoproto.nullable) = false];
  // [Output only] Current status of the site.
  SiteStatus site_status = 25;
}

// SiteStatus is information about the current status of this site.
message SiteStatus {
  enum Status {
    // Not set.
    UNSPECIFIED = 0;
    // Site is being created.
    PROVISIONING = 1;
    // Site is fully usable.
    RUNNING = 2;
    // Site is usable, but a component has an error.
    WARNING = 3;
    // Site is not running.
    ERROR = 4;
  }
  // Site general (overall) status.
  Status status = 1;
  // Conditions for site status.
  repeated Condition conditions = 2;
  // Total number of desired pods.
  int32 desired_replicas = 3;
  // Total number of available pods, either up-to-date
  // or running on previous configurations.
  int32 avaliable_replicas = 4;
  // Total number of pods that are still required for the deployment
  // to have 100% available capacity.
  // They may either be pods that are running but not yet available
  // or pods that still have not been created.
  int32 unavailable_replicas = 5;
  // Total number of non-terminated pods that have the latest configuration applied.
  int32 updated_replicas = 6;
  // Total number of non-terminated pods.
  int32 current_replicas = 7;
  // Site endpoints.
  repeated Endpoint endpoints = 8;
}

// Condition for site status.
message Condition {
  enum Severity {
    // Not set.
    UNSPECIFIED = 0;
    // Component is ok.
    OK = 1;
    // Component has an warning.
    WARNING = 2;
    // Component has an error.
    ERROR = 3;
  }
  // Severity of condition.
  Severity severity = 1;
  // K8s condition name.
  string name = 2;
  // K8s condition status.
  string status = 3;
  // Dashboard component name.
  // E.g.: mysql-operator, memcached, wordpress, wp-cron.
  string component = 4;
  // K8s condition reason.
  // Machine readable message that explain why the status is as is.
  string reason = 5;
  // K8s message reason.
  // Human readable message that explain why the status is as is.
  string message = 6;
  // K8s condition last transition time.
  google.protobuf.Timestamp last_transition_time = 7;
}

// Route consists of a site domain and an optional path prefix
message Route {
  string domain = 1;
  string path_prefix = 2;
}

// BootstrapDetails for the site
message BootstrapDetails {
  string username = 1;
  string password = 2;
  string email = 3;
  string title = 4;
}

// Endpoint for the site
message Endpoint {
  string ip = 1;
  string host = 2;
}

// StorageBucket for the site
message StorageBucket {
  string name = 1;
  string prefix = 2;
}

// EnvVar contains a key and a value for environment variable
message EnvVar {
  string name = 1;
  string value = 2;
}

// EnvVarList the list of environment variables
message EnvVarList {
  repeated EnvVar items = 1 [(gogoproto.nullable) = false];
}

// SMTP contains a host, a port, a tls, a user name and a user password
// for smtp variable
message SMTP {
  // SMTP's host.
  string host = 1;
  // SMTP's port.
  int32 port = 2;
  // User's name
  string user = 3;
  // [Write only] User's password
  string password = 4;
  // SMTP's tls. This provide a way to encrypt communication channel between
  // two machines over the Internet.
  bool use_tls = 5;
  // SMTP's start tls.
  // This indicates that the client wants to upgrade existing, insecure
  // connection to a secure connection using TLS cryptographic protocol.
  bool use_start_tls = 6;
}

// Autoscaler exposes configurations used to dynamically scale the pods.
// The consumer will be able to control it's range.
message Autoscaler {
  // Minimum number of replicas, for a given site
  int32 min_replicas = 1;
  // Maximum number of replicas, for a given site
  int32 max_replicas = 2;
  // [Output only] Current number of replicas
  int32 replicas = 3;
}

// ResourceAllocation describes what the allocated resources for a site are
message ResourceAllocation {
  // Type of the resource that is being allocated
  enum Resource {
    UNSPECIFIED = 0;
    MEMORY_PER_POD = 1;
    CPU_PER_POD = 2;
    PHP_WORKERS = 4;
    PHP_WORKERS_MEMORY = 5;
  }
  Resource resource = 1;
  // Minimum value allocated
  string requested = 2;
  // Maximum value that the allocation can grow to
  string limit = 3;
  // Currently allocated value for the resource
  string current = 4;
}

message CreateSiteRequest {
  // Parent project, for example "projects/{project_name}".
  // Parent is a required parameter
  string parent = 1 [(gogoproto.casttype) = "github.com/presslabs/dashboard-go/pkg/project/v1.Name"];
  // Site resource to create
  Site site = 2 [(gogoproto.nullable) = false];
  BootstrapDetails bootstrap_details = 3 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
  repeated Route routes = 4 [(gogoproto.nullable) = false];
}

message GetSiteRequest {
  // Resource name of the site to fetch in the form
  // projects/super-awesome/sites/{site_name}.
  // `site_name` MUST be a valid DNS label (RFC 1123)
  // with maximum length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}

message UpdateSiteRequest {
  // New definition of the site. It must include a `name`
  Site site = 1 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
  // Fields to be updated.
  // Only `wordpress_image` can be updated
  google.protobuf.FieldMask update_mask = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message UpdateSiteEnvVarsRequest {
  // Parent site, for example projects/{project_name}/sites/{site_name}.
  string parent = 1 [(gogoproto.casttype) = "Name"];
  // New definition of the env vars list.
  EnvVarList env_vars = 2;
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 3 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message UpdateSiteSMTPRequest {
  // Parent site, for example projects/{project_name}/sites/{site_name}.
  string parent = 1 [(gogoproto.casttype) = "Name"];
  // New definition of the smtp.
  SMTP smtp = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 3 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message UpdateSiteResourceAllocationsRequest {
  // Parent site, for example projects/{project_name}/sites/{site_name}.
  string parent = 1 [(gogoproto.casttype) = "Name"];
  // New definition of the resource allocation list.
  repeated ResourceAllocation resources = 2 [(gogoproto.nullable) = false];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 3 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message UpdateSiteAutoscalerRequest {
  // Parent site, for example projects/{project_name}/sites/{site_name}.
  string parent = 1 [(gogoproto.casttype) = "Name"];
  // New definition of the autoscaler.
  Autoscaler autoscaler = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 3 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message DeleteSiteRequest {
  // Resource name of the site to delete in the form
  // projects/super-awesome/sites/{site_name}.
  // `site_name` MUST be a valid DNS label (RFC 1123)
  // with maximum length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}

message ListSitesRequest {
  // Parent project, for example "projects/{project_name}".
  string parent = 1 [(gogoproto.casttype) = "github.com/presslabs/dashboard-go/pkg/project/v1.Name"];
  // Maximum number of items to return.
  int32 page_size = 2;
  // Next_page_token value returned from a previous List request, if any.
  string page_token = 3;
}

message ListSitesResponse {
  repeated Site sites = 1 [(gogoproto.nullable) = false];
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message ListSiteEventsRequest {
  // Parent site to list events for. Eg. projects/{project_name}/sites/{site_name}
  string parent = 1;
  // Maximum number of items to return.
  int32 page_size = 2;
  // next_page_token value returned from a previous List request, if any.
  string page_token = 3;
}

message ListSiteEventsResponse {
  repeated presslabs.dashboard.api.event.v1.Event events = 1 [(gogoproto.nullable) = false];
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message UpdateSiteRoutesRequest {
  // Parent site, for example projects/{project_name}/sites/{site_name}.
  string parent = 1 [(gogoproto.casttype) = "Name"];
  // Routes contains site domains and paths
  repeated Route routes = 2 [(gogoproto.nullable) = false];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 3 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

// SitesService allow managing sites
service SitesService {
  // CreateSite creates a new site
  rpc CreateSite(CreateSiteRequest) returns (Site);
  // GetSite fetches an site by it's name
  rpc GetSite(GetSiteRequest) returns (Site);
  // UpdateSite updates a site details
  rpc UpdateSite(UpdateSiteRequest) returns (Site);
  // UpdateSiteSMTP updates smtp credentials
  rpc UpdateSiteSMTP(UpdateSiteSMTPRequest) returns (Site);
  // UpdateSiteResourceAllocations updates resource allocation
  rpc UpdateSiteResourceAllocations(UpdateSiteResourceAllocationsRequest) returns (Site);
  // UpdateSiteAutoscaler updates autoscaler
  rpc UpdateSiteAutoscaler(UpdateSiteAutoscalerRequest) returns (Site);
  // UpdateSiteEnvVars updates env vars
  rpc UpdateSiteEnvVars(UpdateSiteEnvVarsRequest) returns (Site);
  // DeleteSite deletes a site by it's name
  rpc DeleteSite(DeleteSiteRequest) returns (google.protobuf.Empty);
  // ListSites list sites
  rpc ListSites(ListSitesRequest) returns (ListSitesResponse);
  // ListSiteEvents list site related events
  rpc ListSiteEvents(ListSiteEventsRequest) returns (ListSiteEventsResponse);
  // UpdateSiteRoutes updates site routes
  rpc UpdateSiteRoutes(UpdateSiteRoutesRequest) returns (Site);
}
