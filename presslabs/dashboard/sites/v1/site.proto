syntax = "proto3";

package presslabs.dashboard.sites.v1;

option (gogoproto.equal_all) = true; // Required for test generation
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true; // Required for test generation
option (gogoproto.protosizer_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;
option go_package = "github.com/presslabs/dashboard-go/pkg/site/v1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "presslabs/dashboard/api/event/v1/event.proto";

// Site represents an site within the presslabs dashboard
// context
message Site {
  // The current status of the site.
  enum Status {
    // Not set.
    UNSPECIFIED = 0;
    // The PROVISIONING state indicates the site is being created.
    PROVISIONING = 1;
    // The RUNNING state indicates the site has been provisioned and is fully
    // usable.
    RUNNING = 2;
    // The ERROR state indicates the site may be unusable. Details
    // can be found in the `statusMessage` field.
    ERROR = 3;
  }
  // The fully qualified site name in the form
  // projects/super-awesome/sites/{site_name}.
  // The `site_name` is a valid DNS label (RFC 1123) with maximum
  // length of 48 characters.
  // The name is read-only
  string name = 1 [(gogoproto.casttype) = "Name"];
  // The primary domain for site
  // The primary domain is a required parameter
  string primary_domain = 2;
  // The wordpress image
  string wordpress_image = 3;
  // The site endpoints
  repeated Endpoint endpoints = 4;
  // [Output only] The site's allocated resource
  repeated ResourceAllocation resources = 7;
  // [Output only] The current status of this site.
  Status status = 5;
  // [Output only] Additional information about the current status of this
  // site, if available.
  string status_message = 6;
  // The git_repository_origin is the source of truth, in regards to the site's code.
  // For now, it needs to be a public git repository, that can be cloned via git, ssh and http.
  string git_repository_origin = 8;
  // [OUTPUT_ONLY] The git_repository_deployed_ref will point to the
  // git reference targeted for deployment.
  string git_repository_deployed_ref = 9;
  // The git_repository_ref is git reference desired for deployment.
  // It can be a commit, a tag or a branch.
  // If it's a branch, the system will follow that branch's HEAD, and the actual
  // reference targeted for deployment is exposed in `git_repository_deployed_ref`.
  // If it's a commit or tag, the `git_repository_deployed_ref` will point to that reference.
  string git_repository_ref = 10;
  // [Output only] Site's fully-qualified wp-admin URL
  string wp_admin_url = 11;
  // [Output only] Site's admin username used for site bootstrapping
  string wp_admin_bootstrap_user = 12;
  // [Output only] Site's admin password used for site bootstrapping
  string wp_admin_bootstrap_password = 13;
  // List of environment variables
  repeated EnvVar env_vars = 14;
  // Time when the site was created.
  // This field is read-only.
  google.protobuf.Timestamp created_at = 15;
  // SMTP credentials.
  SMTPCredentials smtp = 16;
  // WordPress resource name. E.g.: `presslabs-com-12fgv`
  string kubernetes_name = 17;
  // Project namespace name.
  string kubernetes_namespace = 18;
}

// Endpoint for the site
message Endpoint {
  string ip = 1;
  string host = 2;
}

// EnvVar contains a key and a value for environment variable
message EnvVar {
  string name = 1;
  string value = 2;
}

// SMTPCredentials contains a host, a port, a tls, a user name and a user password
// for smtp variable
message SMTPCredentials {
  // SMTP's host.
  string host = 1;
  // SMTP's port.
  string port = 2;
  // User's name
  string user_name = 3;
  // User's password
  string user_password = 4;
  // SMTP's tls.
  string tls = 5;
  // SMTP's start tls
  string start_tls = 6;
}

// ResourceAllocation describes what the allocated resources for a site are
message ResourceAllocation {
  // The type of the resource that is being allocated
  enum Resource {
    UNSPECIFIED = 0;
    MEMORY_PER_POD = 1;
    CPU_PER_POD = 2;
    PODS = 3;
    PHP_WORKERS = 4;
    PHP_WORKERS_MEMORY = 5;
  }
  Resource resource = 1;
  // the minimum value allocated
  string requested = 2;
  // the maximum value that the allocation can grow to
  string limit = 3;
  // the currently allocated value for the resource
  string current = 4;
}

message CreateSiteRequest {
  // The parent project, for example "projects/{project_name}".
  // The parent is a required parameter
  string parent = 1 [(gogoproto.casttype) = "github.com/presslabs/dashboard-go/pkg/project/v1.Name"];
  // The site resource to create
  Site site = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message GetSiteRequest {
  // The resource name of the site to fetch in the form
  // projects/super-awesome/sites/{site_name}.
  // The `site_name` MUST be a valid DNS label (RFC 1123)
  // with maximum length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}

message UpdateSiteRequest {
  // The new definition of the site. It must include a `name`
  Site site = 1 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
  // Fields to be updated.
  // Only the `primary_domain` and `wordpress_image` can be updated
  google.protobuf.FieldMask update_mask = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message DeleteSiteRequest {
  // The resource name of the site to delete in the form
  // projects/super-awesome/sites/{site_name}.
  // The `site_name` MUST be a valid DNS label (RFC 1123)
  // with maximum length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}

message ListSitesRequest {
  // The parent project, for example "projects/{project_name}".
  string parent = 1 [(gogoproto.casttype) = "github.com/presslabs/dashboard-go/pkg/project/v1.Name"];
  // The maximum number of items to return.
  int32 page_size = 2;
  // The next_page_token value returned from a previous List request, if
  // any.
  string page_token = 3;
}

message ListSitesResponse {
  repeated Site sites = 1 [(gogoproto.nullable) = false];
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message ListSiteEventsRequest {
  // The parent site to list events for. Eg. projects/{project_name}/sites/{site_name}
  string parent = 1;
  // The maximum number of items to return.
  int32 page_size = 2;
  // The next_page_token value returned from a previous List request, if
  // any.
  string page_token = 3;
}

message ListSiteEventsResponse {
  repeated presslabs.dashboard.api.event.v1.Event events = 1 [(gogoproto.nullable) = false];
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

// SitesService allow managing sites
service SitesService {
  // CreateSite creates a new site
  rpc CreateSite(CreateSiteRequest) returns (Site);
  // GetSite fetches an site by it's name
  rpc GetSite(GetSiteRequest) returns (Site);
  // UpdateSite updates a site details
  rpc UpdateSite(UpdateSiteRequest) returns (Site);
  // UpdateSMTP updates smtp credentials
  rpc UpdateSMTP(UpdateSiteRequest) returns (Site);
  // DeleteSite deletes a site by it's name
  rpc DeleteSite(DeleteSiteRequest) returns (google.protobuf.Empty);
  // ListSites list sites
  rpc ListSites(ListSitesRequest) returns (ListSitesResponse);
  // ListSiteEvents list site related events
  rpc ListSiteEvents(ListSiteEventsRequest) returns (ListSiteEventsResponse);
}
