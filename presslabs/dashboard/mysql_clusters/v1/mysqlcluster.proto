syntax = "proto3";

package presslabs.dashboard.mysqlclusters.v1;

option (gogoproto.equal_all) = true; // Required for test generation
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true; // Required for test generation
option (gogoproto.protosizer_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;
option go_package = "github.com/presslabs/dashboard-go/pkg/mysqlcluster/v1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/field_mask.proto";

message MySQLCluster {
  // Fully qualified backup name in the form projects/{project_name}/mysql_clusters/{cluster_name}.
  // `cluster_name` is a valid DNS label (RFC 1123) with maximum length of 48 characters.
  // Name is read-only.
  string name = 1 [(gogoproto.casttype) = "Name"];
  // [Output only] The URL from which the backup can be downloaded
  // The frequency at which the MySQL operator will schedule cluster backups
  // The expected format is the cron format with 6 places (0 0 0 1 */3 *)
  string backups_cron = 2;
  // The number of MySQL backups the server should retain before deletion
  int32 backups_retain_count = 3;
}

message GetMySQLClusterRequest {
  // Resource name of the MySQL cluster to fetch in the form
  // projects/{project_name}/mysql_cluster/{mysql_cluster_name}.
  // `project_name` MUST be a valid DNS label (RFC 1123)
  // with maximum length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}

message UpdateMySQLClusterRequest {
  // New definition of the MySQL cluster. It must include a `name`
  MySQLCluster mysql_cluster = 1 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

// MySQLClusterService allow managing mysql clusters
service MySQLClusterService {
  // GetMySQLCluster fetches a MySQL cluster by it's name
  rpc GetMySQLCluster(GetMySQLClusterRequest) returns (MySQLCluster);
  // UpdateMySQLCluster updates a MySQL cluster
  rpc UpdateMySQLCluster(UpdateMySQLClusterRequest) returns (MySQLCluster);
}
