syntax = "proto3";

package presslabs.dashboard.memcached.v1;

option (gogoproto.equal_all) = true; // Required for test generation
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true; // Required for test generation
option (gogoproto.protosizer_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;
option go_package = "github.com/presslabs/dashboard-go/pkg/memcached/v1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/field_mask.proto";
import "presslabs/dashboard/affinity/v1/affinity.proto";
import "presslabs/dashboard/toleration/v1/toleration.proto";

message Memcached {
  // Fully qualified backup name in the form
  // organizations/{organization_name}/projects/{project_name}/memcacheds/{memcached_name}.
  // `memcached_name` is a valid DNS label (RFC 1123) with maximum length of 48 characters.
  // Name is read-only.
  string name = 1 [(gogoproto.casttype) = "Name"];
  // Memcached resource allocation
  ResourceAllocation resources = 2 [(gogoproto.nullable) = false];
  // Memcached's Affinity
  presslabs.dashboard.affinity.v1.Affinity affinity = 3;
  // Memcached's Tolerations
  repeated presslabs.dashboard.toleration.v1.Toleration tolerations = 4 [(gogoproto.nullable) = false];
}

// ResourceAllocation for Memcached
message ResourceAllocation {
  bool paused = 1;
  Resource memory = 2 [(gogoproto.nullable) = false];
  Resource cpu = 3 [(gogoproto.nullable) = false];
  int32 desired_replicas = 4;
}

// Resource describe requested and limit resources
message Resource {
  // Enforced hard limits for each named resource
  string limit = 1;
  // Enforced hard requests for each named resource
  string requested = 2;
}

message GetMemcachedRequest {
  // Resource name of the Memcached to fetch in the form
  // organizations/{organization_name}/projects/{project_name}/memcacheds/{memcached_name}.
  // `project_name` MUST be a valid DNS label (RFC 1123)
  // with maximum length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}

message ListMemcachedsRequest {
  // Parent project, for example "projects/{project_name}".
  string parent = 1 [(gogoproto.casttype) = "github.com/presslabs/dashboard-go/pkg/project/v1.Name"];
  // Organization field can be used to list all the memcacheds from an organization.
  // Required if Parent is empty.
  string organization = 2 [(gogoproto.casttype) = "github.com/presslabs/dashboard-go/pkg/organization/v1.Name"];
  // Maximum number of items to return.
  int32 page_size = 3;
  // Next_page_token value returned from a previous List request, if any.
  string page_token = 4;
}

message ListMemcachedsResponse {
  repeated Memcached memcacheds = 1 [(gogoproto.nullable) = false];
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message UpdateMemcachedRequest {
  // New definition of the Memcached. It must include a `name`
  Memcached memcached = 1 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

message UpdateMemcachedResourcesRequest {
  // Parent memcached, for example organizations/{organization_name}/projects/{project_name}/memcacheds/{memcached_name}.
  string parent = 1 [(gogoproto.casttype) = "Name"];
  // New definition of the memcached resource allocation list.
  ResourceAllocation resources = 2 [(gogoproto.nullable) = false];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 3 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

// MemcachedService allow managing memcached
service MemcachedService {
  // GetMemcached fetches a Memcached by it's name
  rpc GetMemcached(GetMemcachedRequest) returns (Memcached);
  // ListMemcacheds lists Memcacheds
  rpc ListMemcacheds(ListMemcachedsRequest) returns (ListMemcachedsResponse);
  // UpdateMemcachedResources updates Memcached resource allocation
  rpc UpdateMemcachedResources(UpdateMemcachedResourcesRequest) returns (Memcached);
  // UpdateMemcached updates the Memcached's Affinity
  rpc UpdateMemcached(UpdateMemcachedRequest) returns (Memcached);
}
