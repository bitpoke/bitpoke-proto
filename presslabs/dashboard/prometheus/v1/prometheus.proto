syntax = "proto3";

package presslabs.dashboard.prometheus.v1;

option (gogoproto.equal_all) = true; // Required for test generation
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true; // Required for test generation
option (gogoproto.protosizer_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;
option go_package = "github.com/presslabs/dashboard-go/pkg/prometheus/v1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/field_mask.proto";
import "presslabs/dashboard/affinity/v1/affinity.proto";
import "presslabs/dashboard/toleration/v1/toleration.proto";

message Prometheus {
  // Fully qualified backup name in the form
  // organizations/{organization_name}/projects/{project_name}/prometheus/{prometheus_name}.
  // `prometheus_name` is a valid DNS label (RFC 1123) with maximum length of 48 characters.
  // Name is read-only.
  string name = 1 [(gogoproto.casttype) = "Name"];
  // Prometheus to google monitoring enabled
  bool google_monitoring_enabled = 2;
  // Prometheus resource allocation
  ResourceAllocation resources = 3 [(gogoproto.nullable) = false];
  // Prometheus's Affinity
  presslabs.dashboard.affinity.v1.Affinity affinity = 4;
  // Prometheus's Tolerations
  repeated presslabs.dashboard.toleration.v1.Toleration tolerations = 5 [(gogoproto.nullable) = false];
}

// ResourceAllocation for Prometheus
message ResourceAllocation {
  bool enabled = 1;
  Resource memory = 2 [(gogoproto.nullable) = false];
  Resource cpu = 3 [(gogoproto.nullable) = false];
  int32 desired_replicas = 4;
  string storage_size = 5;
  string storage_class = 6;
}

// Resource describe requested and limit resources
message Resource {
  // Enforced hard limits for each named resource
  string limit = 1;
  // Enforced hard requests for each named resource
  string requested = 2;
}

message GetPrometheusRequest {
  // Resource name of the Prometheus to fetch in the form
  // organizations/{organization_name}/projects/{project_name}/prometheus/{prometheus_name}.
  // `proetheus_name` MUST be a valid DNS label (RFC 1123)
  // with maximum length of 48 characters.
  string name = 1 [(gogoproto.casttype) = "Name"];
}

message UpdatePrometheusRequest {
  // New definition of the Prometheus. It must include a `name`
  Prometheus prometheus = 1 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
  // Fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [
    (gogoproto.embed) = true,
    (gogoproto.nullable) = false
  ];
}

// PrometheusService allow managing prometheus
service PrometheusService {
  // GetPrometheus fetches a Prometheus by it's name
  rpc GetPrometheus(GetPrometheusRequest) returns (Prometheus);
  // UpdatePrometheus updates the Prometheus's Affinity
  rpc UpdatePrometheus(UpdatePrometheusRequest) returns (Prometheus);
}
