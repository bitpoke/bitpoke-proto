/*
Copyright 2018 Pressinfra SRL

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/presslabs/wordpress-operator/pkg/apis/wordpress/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WordpressLister helps list Wordpresses.
type WordpressLister interface {
	// List lists all Wordpresses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Wordpress, err error)
	// Wordpresses returns an object that can list and get Wordpresses.
	Wordpresses(namespace string) WordpressNamespaceLister
	WordpressListerExpansion
}

// wordpressLister implements the WordpressLister interface.
type wordpressLister struct {
	indexer cache.Indexer
}

// NewWordpressLister returns a new WordpressLister.
func NewWordpressLister(indexer cache.Indexer) WordpressLister {
	return &wordpressLister{indexer: indexer}
}

// List lists all Wordpresses in the indexer.
func (s *wordpressLister) List(selector labels.Selector) (ret []*v1alpha1.Wordpress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Wordpress))
	})
	return ret, err
}

// Wordpresses returns an object that can list and get Wordpresses.
func (s *wordpressLister) Wordpresses(namespace string) WordpressNamespaceLister {
	return wordpressNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WordpressNamespaceLister helps list and get Wordpresses.
type WordpressNamespaceLister interface {
	// List lists all Wordpresses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Wordpress, err error)
	// Get retrieves the Wordpress from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Wordpress, error)
	WordpressNamespaceListerExpansion
}

// wordpressNamespaceLister implements the WordpressNamespaceLister
// interface.
type wordpressNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Wordpresses in the indexer for a given namespace.
func (s wordpressNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Wordpress, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Wordpress))
	})
	return ret, err
}

// Get retrieves the Wordpress from the indexer for a given namespace and name.
func (s wordpressNamespaceLister) Get(name string) (*v1alpha1.Wordpress, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("wordpress"), name)
	}
	return obj.(*v1alpha1.Wordpress), nil
}
