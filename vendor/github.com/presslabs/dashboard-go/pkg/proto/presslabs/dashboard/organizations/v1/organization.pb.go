// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: presslabs/dashboard/organizations/v1/organization.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Organization represents an organization within the presslabs dashboard
// context
type Organization struct {
	// The fully qualified organization name in the form orgs/{organization_name}.
	// The `organization_name` is a valid DNS label (RFC 1123) with maximum
	// length of 48 characters.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The display_name for the organization
	DisplayName          string   `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Organization) Reset()         { *m = Organization{} }
func (m *Organization) String() string { return proto.CompactTextString(m) }
func (*Organization) ProtoMessage()    {}
func (*Organization) Descriptor() ([]byte, []int) {
	return fileDescriptor_organization_758d54fab92036f5, []int{0}
}
func (m *Organization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Organization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Organization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Organization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Organization.Merge(dst, src)
}
func (m *Organization) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Organization) XXX_DiscardUnknown() {
	xxx_messageInfo_Organization.DiscardUnknown(m)
}

var xxx_messageInfo_Organization proto.InternalMessageInfo

func (m *Organization) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Organization) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type GetOrganizationRequest struct {
	// The resource name of the organization to fetch in the form orgs/{organization_name}
	// The `organization_name` MUST be a valid DNS label (RFC 1123)
	// with maximum length of 48 characters.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOrganizationRequest) Reset()         { *m = GetOrganizationRequest{} }
func (m *GetOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrganizationRequest) ProtoMessage()    {}
func (*GetOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_organization_758d54fab92036f5, []int{1}
}
func (m *GetOrganizationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOrganizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOrganizationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOrganizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOrganizationRequest.Merge(dst, src)
}
func (m *GetOrganizationRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetOrganizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOrganizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOrganizationRequest proto.InternalMessageInfo

func (m *GetOrganizationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListOrganizationsRequest struct {
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if any.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOrganizationsRequest) Reset()         { *m = ListOrganizationsRequest{} }
func (m *ListOrganizationsRequest) String() string { return proto.CompactTextString(m) }
func (*ListOrganizationsRequest) ProtoMessage()    {}
func (*ListOrganizationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_organization_758d54fab92036f5, []int{2}
}
func (m *ListOrganizationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOrganizationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOrganizationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListOrganizationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOrganizationsRequest.Merge(dst, src)
}
func (m *ListOrganizationsRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ListOrganizationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOrganizationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListOrganizationsRequest proto.InternalMessageInfo

func (m *ListOrganizationsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListOrganizationsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListOrganizationsResponse struct {
	Organizations []Organization `protobuf:"bytes,1,rep,name=organizations,proto3" json:"organizations"`
	// Token to retrieve the next page of results, or empty if there are no
	// more results in the list.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListOrganizationsResponse) Reset()         { *m = ListOrganizationsResponse{} }
func (m *ListOrganizationsResponse) String() string { return proto.CompactTextString(m) }
func (*ListOrganizationsResponse) ProtoMessage()    {}
func (*ListOrganizationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_organization_758d54fab92036f5, []int{3}
}
func (m *ListOrganizationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListOrganizationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListOrganizationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListOrganizationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListOrganizationsResponse.Merge(dst, src)
}
func (m *ListOrganizationsResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ListOrganizationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListOrganizationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListOrganizationsResponse proto.InternalMessageInfo

func (m *ListOrganizationsResponse) GetOrganizations() []Organization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

func (m *ListOrganizationsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type CreateOrganizationRequest struct {
	// The organization resource to create
	Organization         `protobuf:"bytes,2,opt,name=organization,proto3,embedded=organization" json:"organization"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateOrganizationRequest) Reset()         { *m = CreateOrganizationRequest{} }
func (m *CreateOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOrganizationRequest) ProtoMessage()    {}
func (*CreateOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_organization_758d54fab92036f5, []int{4}
}
func (m *CreateOrganizationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrganizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrganizationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateOrganizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrganizationRequest.Merge(dst, src)
}
func (m *CreateOrganizationRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CreateOrganizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrganizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrganizationRequest proto.InternalMessageInfo

type UpdateOrganizationRequest struct {
	// The new definition of the Folder. It must include
	// a `name` and `display_name` field. The other fields
	// will be ignored.
	Organization `protobuf:"bytes,1,opt,name=organization,proto3,embedded=organization" json:"organization"`
	// Fields to be updated.
	// Only the `display_name` can be updated.
	types.FieldMask      `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3,embedded=update_mask" json:"update_mask"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateOrganizationRequest) Reset()         { *m = UpdateOrganizationRequest{} }
func (m *UpdateOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOrganizationRequest) ProtoMessage()    {}
func (*UpdateOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_organization_758d54fab92036f5, []int{5}
}
func (m *UpdateOrganizationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOrganizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOrganizationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateOrganizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOrganizationRequest.Merge(dst, src)
}
func (m *UpdateOrganizationRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UpdateOrganizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOrganizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOrganizationRequest proto.InternalMessageInfo

type DeleteOrganizationRequest struct {
	// The resource name of the organization to delete in the form orgs/{organization_name}
	// The `organization_name` MUST be a valid DNS label (RFC 1123)
	// with maximum length of 48 characters.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteOrganizationRequest) Reset()         { *m = DeleteOrganizationRequest{} }
func (m *DeleteOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteOrganizationRequest) ProtoMessage()    {}
func (*DeleteOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_organization_758d54fab92036f5, []int{6}
}
func (m *DeleteOrganizationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOrganizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOrganizationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteOrganizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOrganizationRequest.Merge(dst, src)
}
func (m *DeleteOrganizationRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DeleteOrganizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOrganizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOrganizationRequest proto.InternalMessageInfo

func (m *DeleteOrganizationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Organization)(nil), "presslabs.dashboard.organizations.v1.Organization")
	proto.RegisterType((*GetOrganizationRequest)(nil), "presslabs.dashboard.organizations.v1.GetOrganizationRequest")
	proto.RegisterType((*ListOrganizationsRequest)(nil), "presslabs.dashboard.organizations.v1.ListOrganizationsRequest")
	proto.RegisterType((*ListOrganizationsResponse)(nil), "presslabs.dashboard.organizations.v1.ListOrganizationsResponse")
	proto.RegisterType((*CreateOrganizationRequest)(nil), "presslabs.dashboard.organizations.v1.CreateOrganizationRequest")
	proto.RegisterType((*UpdateOrganizationRequest)(nil), "presslabs.dashboard.organizations.v1.UpdateOrganizationRequest")
	proto.RegisterType((*DeleteOrganizationRequest)(nil), "presslabs.dashboard.organizations.v1.DeleteOrganizationRequest")
}
func (this *Organization) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Organization)
	if !ok {
		that2, ok := that.(Organization)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Organization")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Organization but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Organization but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.DisplayName != that1.DisplayName {
		return fmt.Errorf("DisplayName this(%v) Not Equal that(%v)", this.DisplayName, that1.DisplayName)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Organization) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Organization)
	if !ok {
		that2, ok := that.(Organization)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetOrganizationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetOrganizationRequest)
	if !ok {
		that2, ok := that.(GetOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetOrganizationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetOrganizationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetOrganizationRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetOrganizationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOrganizationRequest)
	if !ok {
		that2, ok := that.(GetOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListOrganizationsRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListOrganizationsRequest)
	if !ok {
		that2, ok := that.(ListOrganizationsRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListOrganizationsRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListOrganizationsRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListOrganizationsRequest but is not nil && this == nil")
	}
	if this.PageSize != that1.PageSize {
		return fmt.Errorf("PageSize this(%v) Not Equal that(%v)", this.PageSize, that1.PageSize)
	}
	if this.PageToken != that1.PageToken {
		return fmt.Errorf("PageToken this(%v) Not Equal that(%v)", this.PageToken, that1.PageToken)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ListOrganizationsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOrganizationsRequest)
	if !ok {
		that2, ok := that.(ListOrganizationsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.PageToken != that1.PageToken {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListOrganizationsResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListOrganizationsResponse)
	if !ok {
		that2, ok := that.(ListOrganizationsResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListOrganizationsResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListOrganizationsResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListOrganizationsResponse but is not nil && this == nil")
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return fmt.Errorf("Organizations this(%v) Not Equal that(%v)", len(this.Organizations), len(that1.Organizations))
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(&that1.Organizations[i]) {
			return fmt.Errorf("Organizations this[%v](%v) Not Equal that[%v](%v)", i, this.Organizations[i], i, that1.Organizations[i])
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return fmt.Errorf("NextPageToken this(%v) Not Equal that(%v)", this.NextPageToken, that1.NextPageToken)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ListOrganizationsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListOrganizationsResponse)
	if !ok {
		that2, ok := that.(ListOrganizationsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Organizations) != len(that1.Organizations) {
		return false
	}
	for i := range this.Organizations {
		if !this.Organizations[i].Equal(&that1.Organizations[i]) {
			return false
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateOrganizationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateOrganizationRequest)
	if !ok {
		that2, ok := that.(CreateOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateOrganizationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateOrganizationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateOrganizationRequest but is not nil && this == nil")
	}
	if !this.Organization.Equal(&that1.Organization) {
		return fmt.Errorf("Organization this(%v) Not Equal that(%v)", this.Organization, that1.Organization)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CreateOrganizationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOrganizationRequest)
	if !ok {
		that2, ok := that.(CreateOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Organization.Equal(&that1.Organization) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateOrganizationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateOrganizationRequest)
	if !ok {
		that2, ok := that.(UpdateOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateOrganizationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateOrganizationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateOrganizationRequest but is not nil && this == nil")
	}
	if !this.Organization.Equal(&that1.Organization) {
		return fmt.Errorf("Organization this(%v) Not Equal that(%v)", this.Organization, that1.Organization)
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return fmt.Errorf("FieldMask this(%v) Not Equal that(%v)", this.FieldMask, that1.FieldMask)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UpdateOrganizationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOrganizationRequest)
	if !ok {
		that2, ok := that.(UpdateOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Organization.Equal(&that1.Organization) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteOrganizationRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteOrganizationRequest)
	if !ok {
		that2, ok := that.(DeleteOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteOrganizationRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteOrganizationRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteOrganizationRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DeleteOrganizationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteOrganizationRequest)
	if !ok {
		that2, ok := that.(DeleteOrganizationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Organization) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1.Organization{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOrganizationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1.GetOrganizationRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListOrganizationsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1.ListOrganizationsRequest{")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "PageToken: "+fmt.Sprintf("%#v", this.PageToken)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListOrganizationsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1.ListOrganizationsResponse{")
	if this.Organizations != nil {
		vs := make([]*Organization, len(this.Organizations))
		for i := range vs {
			vs[i] = &this.Organizations[i]
		}
		s = append(s, "Organizations: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOrganizationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1.CreateOrganizationRequest{")
	s = append(s, "Organization: "+strings.Replace(this.Organization.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateOrganizationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1.UpdateOrganizationRequest{")
	s = append(s, "Organization: "+strings.Replace(this.Organization.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "FieldMask: "+strings.Replace(this.FieldMask.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteOrganizationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1.DeleteOrganizationRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOrganization(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OrganizationsServiceClient is the client API for OrganizationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrganizationsServiceClient interface {
	// CreateOrganization creates a new organization
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	// GetOrganization fetches an organization by it's name
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	// UpdateOrganization updates an organization details
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	// DeleteOrganization deletes an organization by it's name
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// ListOrganizations list organizations
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
}

type organizationsServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrganizationsServiceClient(cc *grpc.ClientConn) OrganizationsServiceClient {
	return &organizationsServiceClient{cc}
}

func (c *organizationsServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.organizations.v1.OrganizationsService/CreateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.organizations.v1.OrganizationsService/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.organizations.v1.OrganizationsService/UpdateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.organizations.v1.OrganizationsService/DeleteOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.organizations.v1.OrganizationsService/ListOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsServiceServer is the server API for OrganizationsService service.
type OrganizationsServiceServer interface {
	// CreateOrganization creates a new organization
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*Organization, error)
	// GetOrganization fetches an organization by it's name
	GetOrganization(context.Context, *GetOrganizationRequest) (*Organization, error)
	// UpdateOrganization updates an organization details
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*Organization, error)
	// DeleteOrganization deletes an organization by it's name
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*types.Empty, error)
	// ListOrganizations list organizations
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
}

func RegisterOrganizationsServiceServer(s *grpc.Server, srv OrganizationsServiceServer) {
	s.RegisterService(&_OrganizationsService_serviceDesc, srv)
}

func _OrganizationsService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.organizations.v1.OrganizationsService/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.organizations.v1.OrganizationsService/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.organizations.v1.OrganizationsService/UpdateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.organizations.v1.OrganizationsService/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.organizations.v1.OrganizationsService/ListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrganizationsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "presslabs.dashboard.organizations.v1.OrganizationsService",
	HandlerType: (*OrganizationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganization",
			Handler:    _OrganizationsService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _OrganizationsService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _OrganizationsService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _OrganizationsService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _OrganizationsService_ListOrganizations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "presslabs/dashboard/organizations/v1/organization.proto",
}

func (m *Organization) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Organization) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrganization(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.DisplayName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrganization(dAtA, i, uint64(len(m.DisplayName)))
		i += copy(dAtA[i:], m.DisplayName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOrganizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOrganizationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrganization(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListOrganizationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOrganizationsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrganization(dAtA, i, uint64(m.PageSize))
	}
	if len(m.PageToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrganization(dAtA, i, uint64(len(m.PageToken)))
		i += copy(dAtA[i:], m.PageToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListOrganizationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListOrganizationsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, msg := range m.Organizations {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrganization(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NextPageToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrganization(dAtA, i, uint64(len(m.NextPageToken)))
		i += copy(dAtA[i:], m.NextPageToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateOrganizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrganizationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintOrganization(dAtA, i, uint64(m.Organization.ProtoSize()))
	n1, err := m.Organization.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateOrganizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOrganizationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintOrganization(dAtA, i, uint64(m.Organization.ProtoSize()))
	n2, err := m.Organization.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintOrganization(dAtA, i, uint64(m.FieldMask.ProtoSize()))
	n3, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteOrganizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOrganizationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrganization(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintOrganization(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedOrganization(r randyOrganization, easy bool) *Organization {
	this := &Organization{}
	this.Name = string(randStringOrganization(r))
	this.DisplayName = string(randStringOrganization(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrganization(r, 3)
	}
	return this
}

func NewPopulatedGetOrganizationRequest(r randyOrganization, easy bool) *GetOrganizationRequest {
	this := &GetOrganizationRequest{}
	this.Name = string(randStringOrganization(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrganization(r, 2)
	}
	return this
}

func NewPopulatedListOrganizationsRequest(r randyOrganization, easy bool) *ListOrganizationsRequest {
	this := &ListOrganizationsRequest{}
	this.PageSize = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PageSize *= -1
	}
	this.PageToken = string(randStringOrganization(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrganization(r, 3)
	}
	return this
}

func NewPopulatedListOrganizationsResponse(r randyOrganization, easy bool) *ListOrganizationsResponse {
	this := &ListOrganizationsResponse{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Organizations = make([]Organization, v1)
		for i := 0; i < v1; i++ {
			v2 := NewPopulatedOrganization(r, easy)
			this.Organizations[i] = *v2
		}
	}
	this.NextPageToken = string(randStringOrganization(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrganization(r, 3)
	}
	return this
}

func NewPopulatedCreateOrganizationRequest(r randyOrganization, easy bool) *CreateOrganizationRequest {
	this := &CreateOrganizationRequest{}
	v3 := NewPopulatedOrganization(r, easy)
	this.Organization = *v3
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrganization(r, 3)
	}
	return this
}

func NewPopulatedUpdateOrganizationRequest(r randyOrganization, easy bool) *UpdateOrganizationRequest {
	this := &UpdateOrganizationRequest{}
	v4 := NewPopulatedOrganization(r, easy)
	this.Organization = *v4
	v5 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v5
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrganization(r, 3)
	}
	return this
}

func NewPopulatedDeleteOrganizationRequest(r randyOrganization, easy bool) *DeleteOrganizationRequest {
	this := &DeleteOrganizationRequest{}
	this.Name = string(randStringOrganization(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedOrganization(r, 2)
	}
	return this
}

type randyOrganization interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneOrganization(r randyOrganization) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringOrganization(r randyOrganization) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneOrganization(r)
	}
	return string(tmps)
}
func randUnrecognizedOrganization(r randyOrganization, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldOrganization(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldOrganization(dAtA []byte, r randyOrganization, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateOrganization(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateOrganization(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateOrganization(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateOrganization(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateOrganization(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateOrganization(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateOrganization(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Organization) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOrganization(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovOrganization(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOrganizationRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOrganization(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListOrganizationsRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovOrganization(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovOrganization(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListOrganizationsResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Organizations) > 0 {
		for _, e := range m.Organizations {
			l = e.ProtoSize()
			n += 1 + l + sovOrganization(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovOrganization(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateOrganizationRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Organization.ProtoSize()
	n += 1 + l + sovOrganization(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateOrganizationRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Organization.ProtoSize()
	n += 1 + l + sovOrganization(uint64(l))
	l = m.FieldMask.ProtoSize()
	n += 1 + l + sovOrganization(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteOrganizationRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOrganization(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOrganization(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOrganization(x uint64) (n int) {
	return sovOrganization(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Organization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrganization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Organization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Organization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrganization
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrganization
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrganization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrganization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOrganizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrganization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOrganizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOrganizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrganization
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrganization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrganization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOrganizationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrganization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOrganizationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOrganizationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrganization
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrganization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrganization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListOrganizationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrganization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListOrganizationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListOrganizationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrganization
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Organizations = append(m.Organizations, Organization{})
			if err := m.Organizations[len(m.Organizations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrganization
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrganization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrganization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrganizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrganization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrganizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrganizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrganization
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrganization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrganization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOrganizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrganization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOrganizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOrganizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrganization
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrganization
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrganization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrganization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOrganizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrganization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOrganizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOrganizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrganization
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrganization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrganization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrganization(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrganization
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrganization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOrganization
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOrganization
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOrganization(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOrganization = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrganization   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("presslabs/dashboard/organizations/v1/organization.proto", fileDescriptor_organization_758d54fab92036f5)
}

var fileDescriptor_organization_758d54fab92036f5 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xbd, 0x6e, 0xd3, 0x50,
	0x14, 0xe6, 0x96, 0x16, 0xb5, 0x27, 0xa9, 0x2a, 0xae, 0x50, 0x95, 0xb8, 0xc2, 0x0d, 0x56, 0x85,
	0x3a, 0xc0, 0xb5, 0x12, 0x06, 0x16, 0x44, 0xa5, 0x42, 0x60, 0xe1, 0x4f, 0x29, 0x30, 0x30, 0x10,
	0x6e, 0x9a, 0x53, 0xd7, 0x4a, 0xec, 0x6b, 0x7c, 0x9d, 0x88, 0x46, 0x62, 0x62, 0x62, 0xe7, 0x01,
	0x90, 0x58, 0x78, 0x04, 0xc4, 0xcc, 0xd0, 0xb1, 0x4f, 0x50, 0x91, 0xf0, 0x02, 0x8c, 0x8c, 0xc8,
	0xd7, 0x69, 0xb0, 0x6b, 0x47, 0xb2, 0x2c, 0x36, 0xfb, 0xfc, 0x7c, 0xe7, 0x3b, 0xe7, 0x7c, 0xf7,
	0xc0, 0x6d, 0xcf, 0x47, 0x29, 0xfb, 0xbc, 0x23, 0xcd, 0x2e, 0x97, 0x87, 0x1d, 0xc1, 0xfd, 0xae,
	0x29, 0x7c, 0x8b, 0xbb, 0xf6, 0x88, 0x07, 0xb6, 0x70, 0xa5, 0x39, 0xac, 0x27, 0x0c, 0xcc, 0xf3,
	0x45, 0x20, 0xe8, 0xd6, 0x2c, 0x91, 0xcd, 0x12, 0x59, 0x22, 0x91, 0x0d, 0xeb, 0xda, 0x4d, 0xcb,
	0x0e, 0x0e, 0x07, 0x1d, 0xb6, 0x2f, 0x1c, 0xd3, 0x12, 0x96, 0x30, 0x55, 0x72, 0x67, 0x70, 0xa0,
	0xfe, 0xd4, 0x8f, 0xfa, 0x8a, 0x40, 0xb5, 0x0d, 0x4b, 0x08, 0xab, 0x8f, 0xff, 0xa2, 0xd0, 0xf1,
	0x82, 0xa3, 0xa9, 0xb3, 0x76, 0xde, 0x79, 0x60, 0x63, 0xbf, 0xdb, 0x76, 0xb8, 0xec, 0x45, 0x11,
	0x46, 0x13, 0xca, 0x4f, 0x63, 0x0c, 0x28, 0x85, 0x45, 0x97, 0x3b, 0x58, 0x21, 0x35, 0xb2, 0xbd,
	0xd2, 0x52, 0xdf, 0xf4, 0x1a, 0x94, 0xbb, 0xb6, 0xf4, 0xfa, 0xfc, 0xa8, 0xad, 0x7c, 0x0b, 0xca,
	0x57, 0x9a, 0xda, 0x9e, 0x70, 0x07, 0x8d, 0x1b, 0xb0, 0xfe, 0x10, 0x83, 0x38, 0x52, 0x0b, 0xdf,
	0x0e, 0x50, 0x06, 0x59, 0x80, 0xc6, 0x4b, 0xa8, 0x3c, 0xb2, 0x65, 0x22, 0x5c, 0x9e, 0xc5, 0x6f,
	0xc0, 0x8a, 0xc7, 0x2d, 0x6c, 0x4b, 0x7b, 0x14, 0x25, 0x2d, 0xb5, 0x96, 0x43, 0xc3, 0x9e, 0x3d,
	0x42, 0x7a, 0x15, 0x40, 0x39, 0x03, 0xd1, 0x43, 0x77, 0xca, 0x43, 0x85, 0x3f, 0x0f, 0x0d, 0xc6,
	0x17, 0x02, 0xd5, 0x0c, 0x60, 0xe9, 0x09, 0x57, 0x22, 0x7d, 0x0d, 0xab, 0x89, 0x61, 0x57, 0x48,
	0xed, 0xe2, 0x76, 0xa9, 0xd1, 0x60, 0x79, 0xd6, 0xc2, 0xe2, 0x98, 0xbb, 0x8b, 0xc7, 0xa7, 0x9b,
	0x17, 0x5a, 0x49, 0x38, 0x7a, 0x1d, 0xd6, 0x5c, 0x7c, 0x17, 0xb4, 0x53, 0x0c, 0x57, 0x43, 0xf3,
	0xb3, 0x19, 0xcb, 0xf7, 0x50, 0xbd, 0xe7, 0x23, 0x0f, 0x30, 0x6b, 0x5c, 0x6f, 0xa0, 0x1c, 0x47,
	0x55, 0x08, 0xc5, 0x38, 0x2e, 0x87, 0x1c, 0x4f, 0x4e, 0x37, 0x49, 0x2b, 0x81, 0x68, 0xfc, 0x20,
	0x50, 0x7d, 0xe1, 0x75, 0x73, 0xd6, 0x27, 0xff, 0xbb, 0x3e, 0x6d, 0x42, 0x69, 0xa0, 0xca, 0x2b,
	0x19, 0x4e, 0x1b, 0xd4, 0x58, 0xa4, 0x54, 0x76, 0xa6, 0x54, 0xf6, 0x20, 0x54, 0xea, 0x63, 0x2e,
	0x7b, 0x31, 0x20, 0x88, 0x12, 0x43, 0xab, 0x61, 0x42, 0xf5, 0x3e, 0xf6, 0x31, 0xbb, 0x8b, 0x0c,
	0xd1, 0x35, 0xbe, 0x2f, 0xc1, 0x95, 0x84, 0x30, 0xf6, 0xd0, 0x1f, 0xda, 0xfb, 0x48, 0x3f, 0x12,
	0xa0, 0xe9, 0x85, 0xd0, 0x9d, 0x7c, 0x3d, 0xcf, 0x5d, 0xa5, 0x56, 0x60, 0x68, 0xf4, 0x03, 0x81,
	0xb5, 0x73, 0x0f, 0x89, 0xde, 0xc9, 0x87, 0x93, 0xfd, 0xfe, 0x0a, 0xb1, 0x08, 0x27, 0x92, 0x96,
	0x48, 0xde, 0x89, 0xcc, 0x15, 0x57, 0x21, 0x2e, 0x0e, 0xd0, 0xf4, 0x9e, 0xf3, 0x52, 0x99, 0xab,
	0x10, 0x6d, 0x3d, 0x25, 0xb8, 0x66, 0x78, 0x37, 0xe9, 0x27, 0x02, 0x97, 0x53, 0x27, 0x84, 0xde,
	0xcd, 0x57, 0x6e, 0xde, 0x51, 0xd3, 0x76, 0x0a, 0xe7, 0x47, 0xb7, 0x6b, 0x77, 0xeb, 0xe7, 0x58,
	0x27, 0xbf, 0xc7, 0x3a, 0xf9, 0x33, 0xd6, 0xc9, 0xd7, 0x89, 0x4e, 0xbe, 0x4d, 0x74, 0x72, 0x3c,
	0xd1, 0xc9, 0xc9, 0x44, 0x27, 0x9f, 0x7f, 0xe9, 0xe4, 0xd5, 0xc2, 0xb0, 0xde, 0xb9, 0xa4, 0x9a,
	0xb9, 0xf5, 0x37, 0x00, 0x00, 0xff, 0xff, 0x07, 0xe5, 0xb1, 0x5e, 0xa2, 0x06, 0x00, 0x00,
}
