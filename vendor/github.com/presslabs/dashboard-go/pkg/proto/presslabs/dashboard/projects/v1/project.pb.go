// Code generated by protoc-gen-go. DO NOT EDIT.
// source: presslabs/dashboard/projects/v1/project.proto

package v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import field_mask "google.golang.org/genproto/protobuf/field_mask"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Projects represents an project within the presslabs dashboard
// context
type Project struct {
	// The fully qualified project name in the form proj/{project_name}.
	// The `project_name` is a valid DNS label (RFC 1123) with maximum
	// length of 48 characters.
	// The name is read-only
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The display_name for the project
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The organization name. The organization is immutable.
	// This field is read-only
	Organization         string   `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_dc9571c69c7b9b93, []int{0}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Project.Unmarshal(m, b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Project.Marshal(b, m, deterministic)
}
func (dst *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(dst, src)
}
func (m *Project) XXX_Size() int {
	return xxx_messageInfo_Project.Size(m)
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Project) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

type GetProjectRequest struct {
	// The resource name of the project to fetch in the form proj/{project_name}
	// The `project_name` MUST be a valid DNS label (RFC 1123)
	// with maximum length of 48 characters.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetProjectRequest) Reset()         { *m = GetProjectRequest{} }
func (m *GetProjectRequest) String() string { return proto.CompactTextString(m) }
func (*GetProjectRequest) ProtoMessage()    {}
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_dc9571c69c7b9b93, []int{1}
}
func (m *GetProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetProjectRequest.Unmarshal(m, b)
}
func (m *GetProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetProjectRequest.Marshal(b, m, deterministic)
}
func (dst *GetProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProjectRequest.Merge(dst, src)
}
func (m *GetProjectRequest) XXX_Size() int {
	return xxx_messageInfo_GetProjectRequest.Size(m)
}
func (m *GetProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetProjectRequest proto.InternalMessageInfo

func (m *GetProjectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListProjectsRequest struct {
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if
	// any.
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProjectsRequest) Reset()         { *m = ListProjectsRequest{} }
func (m *ListProjectsRequest) String() string { return proto.CompactTextString(m) }
func (*ListProjectsRequest) ProtoMessage()    {}
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_dc9571c69c7b9b93, []int{2}
}
func (m *ListProjectsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProjectsRequest.Unmarshal(m, b)
}
func (m *ListProjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProjectsRequest.Marshal(b, m, deterministic)
}
func (dst *ListProjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProjectsRequest.Merge(dst, src)
}
func (m *ListProjectsRequest) XXX_Size() int {
	return xxx_messageInfo_ListProjectsRequest.Size(m)
}
func (m *ListProjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListProjectsRequest proto.InternalMessageInfo

func (m *ListProjectsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListProjectsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListProjectsResponse struct {
	Projects []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	// Token to retrieve the next page of results, or empty if there are no
	// more results in the list.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListProjectsResponse) Reset()         { *m = ListProjectsResponse{} }
func (m *ListProjectsResponse) String() string { return proto.CompactTextString(m) }
func (*ListProjectsResponse) ProtoMessage()    {}
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_dc9571c69c7b9b93, []int{3}
}
func (m *ListProjectsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListProjectsResponse.Unmarshal(m, b)
}
func (m *ListProjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListProjectsResponse.Marshal(b, m, deterministic)
}
func (dst *ListProjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProjectsResponse.Merge(dst, src)
}
func (m *ListProjectsResponse) XXX_Size() int {
	return xxx_messageInfo_ListProjectsResponse.Size(m)
}
func (m *ListProjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListProjectsResponse proto.InternalMessageInfo

func (m *ListProjectsResponse) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *ListProjectsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type CreateProjectRequest struct {
	// The parent resource name where the project is to be created
	// The parent is a required parameter
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The project resource to create
	Project              *Project `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateProjectRequest) Reset()         { *m = CreateProjectRequest{} }
func (m *CreateProjectRequest) String() string { return proto.CompactTextString(m) }
func (*CreateProjectRequest) ProtoMessage()    {}
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_dc9571c69c7b9b93, []int{4}
}
func (m *CreateProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateProjectRequest.Unmarshal(m, b)
}
func (m *CreateProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateProjectRequest.Marshal(b, m, deterministic)
}
func (dst *CreateProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProjectRequest.Merge(dst, src)
}
func (m *CreateProjectRequest) XXX_Size() int {
	return xxx_messageInfo_CreateProjectRequest.Size(m)
}
func (m *CreateProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProjectRequest proto.InternalMessageInfo

func (m *CreateProjectRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateProjectRequest) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

type UpdateProjectRequest struct {
	// The new definition of the Folder. It must include
	// a `name` , `organization` and `display_name` field.
	// The other fields will be ignored.
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Fields to be updated.
	// Only the `display_name` can be updated.
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateProjectRequest) Reset()         { *m = UpdateProjectRequest{} }
func (m *UpdateProjectRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateProjectRequest) ProtoMessage()    {}
func (*UpdateProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_dc9571c69c7b9b93, []int{5}
}
func (m *UpdateProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateProjectRequest.Unmarshal(m, b)
}
func (m *UpdateProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateProjectRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProjectRequest.Merge(dst, src)
}
func (m *UpdateProjectRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateProjectRequest.Size(m)
}
func (m *UpdateProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProjectRequest proto.InternalMessageInfo

func (m *UpdateProjectRequest) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *UpdateProjectRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type DeleteProjectRequest struct {
	// The resource name of the project to delete in the form projs/{project_name}
	// The `project_name` MUST be a valid DNS label (RFC 1123)
	// with maximum length of 48 characters.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteProjectRequest) Reset()         { *m = DeleteProjectRequest{} }
func (m *DeleteProjectRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteProjectRequest) ProtoMessage()    {}
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_project_dc9571c69c7b9b93, []int{6}
}
func (m *DeleteProjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteProjectRequest.Unmarshal(m, b)
}
func (m *DeleteProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteProjectRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteProjectRequest.Merge(dst, src)
}
func (m *DeleteProjectRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteProjectRequest.Size(m)
}
func (m *DeleteProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteProjectRequest proto.InternalMessageInfo

func (m *DeleteProjectRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Project)(nil), "presslabs.dashboard.projects.v1.Project")
	proto.RegisterType((*GetProjectRequest)(nil), "presslabs.dashboard.projects.v1.GetProjectRequest")
	proto.RegisterType((*ListProjectsRequest)(nil), "presslabs.dashboard.projects.v1.ListProjectsRequest")
	proto.RegisterType((*ListProjectsResponse)(nil), "presslabs.dashboard.projects.v1.ListProjectsResponse")
	proto.RegisterType((*CreateProjectRequest)(nil), "presslabs.dashboard.projects.v1.CreateProjectRequest")
	proto.RegisterType((*UpdateProjectRequest)(nil), "presslabs.dashboard.projects.v1.UpdateProjectRequest")
	proto.RegisterType((*DeleteProjectRequest)(nil), "presslabs.dashboard.projects.v1.DeleteProjectRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProjectsServiceClient is the client API for ProjectsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectsServiceClient interface {
	// CreateProject creates a new project
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error)
	// GetProject fetches an project by it's name
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
	// UpdateProject updates an project details
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*Project, error)
	// DeleteProject deletes an project by it's name
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// ListProjects list projects
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
}

type projectsServiceClient struct {
	cc *grpc.ClientConn
}

func NewProjectsServiceClient(cc *grpc.ClientConn) ProjectsServiceClient {
	return &projectsServiceClient{cc}
}

func (c *projectsServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.projects.v1.ProjectsService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.projects.v1.ProjectsService/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.projects.v1.ProjectsService/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.projects.v1.ProjectsService/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.projects.v1.ProjectsService/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsServiceServer is the server API for ProjectsService service.
type ProjectsServiceServer interface {
	// CreateProject creates a new project
	CreateProject(context.Context, *CreateProjectRequest) (*Project, error)
	// GetProject fetches an project by it's name
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	// UpdateProject updates an project details
	UpdateProject(context.Context, *UpdateProjectRequest) (*Project, error)
	// DeleteProject deletes an project by it's name
	DeleteProject(context.Context, *DeleteProjectRequest) (*empty.Empty, error)
	// ListProjects list projects
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
}

func RegisterProjectsServiceServer(s *grpc.Server, srv ProjectsServiceServer) {
	s.RegisterService(&_ProjectsService_serviceDesc, srv)
}

func _ProjectsService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.projects.v1.ProjectsService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.projects.v1.ProjectsService/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.projects.v1.ProjectsService/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.projects.v1.ProjectsService/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.projects.v1.ProjectsService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "presslabs.dashboard.projects.v1.ProjectsService",
	HandlerType: (*ProjectsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _ProjectsService_CreateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ProjectsService_GetProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectsService_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectsService_DeleteProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _ProjectsService_ListProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "presslabs/dashboard/projects/v1/project.proto",
}

func init() {
	proto.RegisterFile("presslabs/dashboard/projects/v1/project.proto", fileDescriptor_project_dc9571c69c7b9b93)
}

var fileDescriptor_project_dc9571c69c7b9b93 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0xdb, 0xd0, 0x8f, 0x49, 0xa2, 0x8a, 0x25, 0xaa, 0x22, 0x57, 0x88, 0xe0, 0x03, 0x44,
	0x48, 0xac, 0x95, 0x40, 0x4f, 0xdc, 0x4a, 0x81, 0x0b, 0xa0, 0x92, 0xc2, 0x85, 0x03, 0xd1, 0xa6,
	0x9e, 0x86, 0x6d, 0x1c, 0xef, 0xb2, 0xbb, 0x89, 0x68, 0xb8, 0xf2, 0x1f, 0xf8, 0x37, 0xfc, 0x36,
	0xe4, 0xb5, 0x37, 0xd4, 0xb5, 0xa5, 0x24, 0xbd, 0xad, 0x67, 0xdf, 0xcc, 0x9b, 0x79, 0xf3, 0xbc,
	0xf0, 0x5c, 0x2a, 0xd4, 0x3a, 0x66, 0x23, 0x1d, 0x46, 0x4c, 0x7f, 0x1f, 0x09, 0xa6, 0xa2, 0x50,
	0x2a, 0x71, 0x85, 0x17, 0x46, 0x87, 0xf3, 0x9e, 0x3b, 0x53, 0xa9, 0x84, 0x11, 0xe4, 0xd1, 0x12,
	0x4e, 0x97, 0x70, 0xea, 0xe0, 0x74, 0xde, 0xf3, 0x8f, 0xc6, 0x42, 0x8c, 0x63, 0x0c, 0x2d, 0x7c,
	0x34, 0xbb, 0x0c, 0x71, 0x2a, 0xcd, 0x75, 0x96, 0xed, 0x77, 0x6e, 0x5f, 0x5e, 0x72, 0x8c, 0xa3,
	0xe1, 0x94, 0xe9, 0x49, 0x86, 0x08, 0x22, 0xd8, 0x3d, 0xcb, 0xaa, 0x11, 0x02, 0xb5, 0x84, 0x4d,
	0xb1, 0xed, 0x75, 0xbc, 0xee, 0xfe, 0xc0, 0x9e, 0xc9, 0x63, 0x68, 0x44, 0x5c, 0xcb, 0x98, 0x5d,
	0x0f, 0xed, 0xdd, 0x96, 0xbd, 0xab, 0xe7, 0xb1, 0x8f, 0x29, 0x24, 0x80, 0x86, 0x50, 0x63, 0x96,
	0xf0, 0x05, 0x33, 0x5c, 0x24, 0xed, 0x6d, 0x0b, 0x29, 0xc4, 0x82, 0xa7, 0x70, 0xff, 0x1d, 0x9a,
	0x9c, 0x68, 0x80, 0x3f, 0x66, 0xa8, 0x2b, 0xf9, 0x82, 0x4f, 0xf0, 0xe0, 0x3d, 0xd7, 0x0e, 0xa9,
	0x1d, 0xf4, 0x08, 0xf6, 0x25, 0x1b, 0xe3, 0x50, 0xf3, 0x45, 0x86, 0xbf, 0x37, 0xd8, 0x4b, 0x03,
	0xe7, 0x7c, 0x81, 0xe4, 0x21, 0x80, 0xbd, 0x34, 0x62, 0x82, 0x49, 0xde, 0xa1, 0x85, 0x7f, 0x4e,
	0x03, 0xc1, 0x6f, 0x0f, 0x5a, 0xc5, 0x9a, 0x5a, 0x8a, 0x44, 0x23, 0x39, 0x85, 0x3d, 0x27, 0x64,
	0xdb, 0xeb, 0x6c, 0x77, 0xeb, 0xfd, 0x2e, 0x5d, 0xa1, 0x36, 0x75, 0x23, 0x2c, 0x33, 0xc9, 0x13,
	0x38, 0x48, 0xf0, 0xa7, 0x19, 0x96, 0x5a, 0x68, 0xa6, 0xe1, 0xb3, 0x65, 0x1b, 0x0a, 0x5a, 0xaf,
	0x15, 0x32, 0x83, 0xb7, 0x54, 0x38, 0x84, 0x1d, 0xc9, 0x14, 0x26, 0x26, 0xd7, 0x21, 0xff, 0x22,
	0x27, 0xb0, 0x9b, 0x73, 0x58, 0x45, 0x37, 0x69, 0xce, 0x25, 0x06, 0x7f, 0x3c, 0x68, 0x7d, 0x91,
	0x51, 0x99, 0xf4, 0x46, 0x71, 0xef, 0x8e, 0xc5, 0xc9, 0x2b, 0xa8, 0xcf, 0x6c, 0x6d, 0x6b, 0x27,
	0x3b, 0x74, 0xbd, 0xef, 0xd3, 0xcc, 0x71, 0xd4, 0x39, 0x8e, 0xbe, 0x4d, 0x1d, 0xf7, 0x81, 0xe9,
	0xc9, 0x00, 0x32, 0x78, 0x7a, 0x0e, 0x9e, 0x41, 0xeb, 0x14, 0x63, 0x2c, 0x35, 0x56, 0xe1, 0x89,
	0xfe, 0xdf, 0x1a, 0x1c, 0xb8, 0xe5, 0x9d, 0xa3, 0x9a, 0xf3, 0x0b, 0x24, 0x12, 0x9a, 0x05, 0x35,
	0xc9, 0xf1, 0xca, 0x01, 0xaa, 0xd4, 0xf7, 0xd7, 0x9e, 0x9b, 0x5c, 0x01, 0xfc, 0xb7, 0x30, 0xe9,
	0xaf, 0xcc, 0x2b, 0xf9, 0x7d, 0x03, 0x2e, 0x09, 0xcd, 0xc2, 0xda, 0xd6, 0x98, 0xae, 0x6a, 0xcd,
	0x1b, 0x30, 0x7e, 0x83, 0x66, 0x61, 0x1f, 0x6b, 0x30, 0x56, 0xed, 0xcf, 0x3f, 0x2c, 0xed, 0xff,
	0x4d, 0xfa, 0x1c, 0x91, 0x5f, 0xd0, 0xb8, 0xf9, 0x0f, 0x92, 0x97, 0x2b, 0xcb, 0x57, 0x3c, 0x03,
	0xfe, 0xf1, 0x86, 0x59, 0xd9, 0x8f, 0x7e, 0x52, 0xfb, 0xba, 0x35, 0xef, 0x8d, 0x76, 0x6c, 0x4b,
	0x2f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x9d, 0xf9, 0xf0, 0x81, 0x05, 0x00, 0x00,
}
