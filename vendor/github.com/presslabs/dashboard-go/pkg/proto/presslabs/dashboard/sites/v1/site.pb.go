// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: presslabs/dashboard/sites/v1/site.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Site represents an site within the presslabs dashboard
// context
type Site struct {
	// The fully qualified site name in the form
	// project/super-awesome/site/{site_name}.
	// The `site_name` is a valid DNS label (RFC 1123) with maximum
	// length of 48 characters.
	// The name is read-only
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The primary domain for site
	PrimaryDomain string `protobuf:"bytes,2,opt,name=primary_domain,json=primaryDomain,proto3" json:"primary_domain,omitempty"`
	// The wordpress image
	WordpressImage       string   `protobuf:"bytes,3,opt,name=wordpress_image,json=wordpressImage,proto3" json:"wordpress_image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Site) Reset()         { *m = Site{} }
func (m *Site) String() string { return proto.CompactTextString(m) }
func (*Site) ProtoMessage()    {}
func (*Site) Descriptor() ([]byte, []int) {
	return fileDescriptor_site_f521f38883a37528, []int{0}
}
func (m *Site) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Site) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Site.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Site) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Site.Merge(dst, src)
}
func (m *Site) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Site) XXX_DiscardUnknown() {
	xxx_messageInfo_Site.DiscardUnknown(m)
}

var xxx_messageInfo_Site proto.InternalMessageInfo

func (m *Site) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Site) GetPrimaryDomain() string {
	if m != nil {
		return m.PrimaryDomain
	}
	return ""
}

func (m *Site) GetWordpressImage() string {
	if m != nil {
		return m.WordpressImage
	}
	return ""
}

type CreateSiteRequest struct {
	// The parent project, for example "project/{project_name}".
	// The parent is a required parameter
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The site resource to create
	Site                 `protobuf:"bytes,2,opt,name=site,proto3,embedded=site" json:"site"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSiteRequest) Reset()         { *m = CreateSiteRequest{} }
func (m *CreateSiteRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSiteRequest) ProtoMessage()    {}
func (*CreateSiteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_site_f521f38883a37528, []int{1}
}
func (m *CreateSiteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSiteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSiteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateSiteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSiteRequest.Merge(dst, src)
}
func (m *CreateSiteRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *CreateSiteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSiteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSiteRequest proto.InternalMessageInfo

func (m *CreateSiteRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

type GetSiteRequest struct {
	// The resource name of the site to fetch in the form
	// project/super-awesome/site/{site_name}.
	// The `site_name` MUST be a valid DNS label (RFC 1123)
	// with maximum length of 48 characters.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSiteRequest) Reset()         { *m = GetSiteRequest{} }
func (m *GetSiteRequest) String() string { return proto.CompactTextString(m) }
func (*GetSiteRequest) ProtoMessage()    {}
func (*GetSiteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_site_f521f38883a37528, []int{2}
}
func (m *GetSiteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSiteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSiteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSiteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSiteRequest.Merge(dst, src)
}
func (m *GetSiteRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *GetSiteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSiteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSiteRequest proto.InternalMessageInfo

func (m *GetSiteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateSiteRequest struct {
	// The new definition of the Folder. It must include a `name`
	Site `protobuf:"bytes,1,opt,name=site,proto3,embedded=site" json:"site"`
	// Fields to be updated.
	// Only the `primary_domain` and `wordpress_image` can be updated
	types.FieldMask      `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3,embedded=update_mask" json:"update_mask"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSiteRequest) Reset()         { *m = UpdateSiteRequest{} }
func (m *UpdateSiteRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSiteRequest) ProtoMessage()    {}
func (*UpdateSiteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_site_f521f38883a37528, []int{3}
}
func (m *UpdateSiteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSiteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSiteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateSiteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSiteRequest.Merge(dst, src)
}
func (m *UpdateSiteRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *UpdateSiteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSiteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSiteRequest proto.InternalMessageInfo

type DeleteSiteRequest struct {
	// The resource name of the site to delete in the form
	// project/super-awesome/site/{site_name}.
	// The `site_name` MUST be a valid DNS label (RFC 1123)
	// with maximum length of 48 characters.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSiteRequest) Reset()         { *m = DeleteSiteRequest{} }
func (m *DeleteSiteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSiteRequest) ProtoMessage()    {}
func (*DeleteSiteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_site_f521f38883a37528, []int{4}
}
func (m *DeleteSiteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSiteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSiteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteSiteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSiteRequest.Merge(dst, src)
}
func (m *DeleteSiteRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *DeleteSiteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSiteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSiteRequest proto.InternalMessageInfo

func (m *DeleteSiteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListSitesRequest struct {
	// The parent project, for example "project/{project_name}".
	// The parent is a required parameter
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if
	// any.
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSitesRequest) Reset()         { *m = ListSitesRequest{} }
func (m *ListSitesRequest) String() string { return proto.CompactTextString(m) }
func (*ListSitesRequest) ProtoMessage()    {}
func (*ListSitesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_site_f521f38883a37528, []int{5}
}
func (m *ListSitesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSitesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSitesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListSitesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSitesRequest.Merge(dst, src)
}
func (m *ListSitesRequest) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ListSitesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSitesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSitesRequest proto.InternalMessageInfo

func (m *ListSitesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListSitesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListSitesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListSitesResponse struct {
	Sites []Site `protobuf:"bytes,1,rep,name=sites,proto3" json:"sites"`
	// Token to retrieve the next page of results, or empty if there are no
	// more results in the list.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSitesResponse) Reset()         { *m = ListSitesResponse{} }
func (m *ListSitesResponse) String() string { return proto.CompactTextString(m) }
func (*ListSitesResponse) ProtoMessage()    {}
func (*ListSitesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_site_f521f38883a37528, []int{6}
}
func (m *ListSitesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSitesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSitesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListSitesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSitesResponse.Merge(dst, src)
}
func (m *ListSitesResponse) XXX_Size() int {
	return m.ProtoSize()
}
func (m *ListSitesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSitesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSitesResponse proto.InternalMessageInfo

func (m *ListSitesResponse) GetSites() []Site {
	if m != nil {
		return m.Sites
	}
	return nil
}

func (m *ListSitesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterType((*Site)(nil), "presslabs.dashboard.sites.v1.Site")
	proto.RegisterType((*CreateSiteRequest)(nil), "presslabs.dashboard.sites.v1.CreateSiteRequest")
	proto.RegisterType((*GetSiteRequest)(nil), "presslabs.dashboard.sites.v1.GetSiteRequest")
	proto.RegisterType((*UpdateSiteRequest)(nil), "presslabs.dashboard.sites.v1.UpdateSiteRequest")
	proto.RegisterType((*DeleteSiteRequest)(nil), "presslabs.dashboard.sites.v1.DeleteSiteRequest")
	proto.RegisterType((*ListSitesRequest)(nil), "presslabs.dashboard.sites.v1.ListSitesRequest")
	proto.RegisterType((*ListSitesResponse)(nil), "presslabs.dashboard.sites.v1.ListSitesResponse")
}
func (this *Site) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Site)
	if !ok {
		that2, ok := that.(Site)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Site")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Site but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Site but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.PrimaryDomain != that1.PrimaryDomain {
		return fmt.Errorf("PrimaryDomain this(%v) Not Equal that(%v)", this.PrimaryDomain, that1.PrimaryDomain)
	}
	if this.WordpressImage != that1.WordpressImage {
		return fmt.Errorf("WordpressImage this(%v) Not Equal that(%v)", this.WordpressImage, that1.WordpressImage)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Site) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Site)
	if !ok {
		that2, ok := that.(Site)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.PrimaryDomain != that1.PrimaryDomain {
		return false
	}
	if this.WordpressImage != that1.WordpressImage {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateSiteRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateSiteRequest)
	if !ok {
		that2, ok := that.(CreateSiteRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateSiteRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateSiteRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateSiteRequest but is not nil && this == nil")
	}
	if this.Parent != that1.Parent {
		return fmt.Errorf("Parent this(%v) Not Equal that(%v)", this.Parent, that1.Parent)
	}
	if !this.Site.Equal(&that1.Site) {
		return fmt.Errorf("Site this(%v) Not Equal that(%v)", this.Site, that1.Site)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CreateSiteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSiteRequest)
	if !ok {
		that2, ok := that.(CreateSiteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Parent != that1.Parent {
		return false
	}
	if !this.Site.Equal(&that1.Site) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetSiteRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetSiteRequest)
	if !ok {
		that2, ok := that.(GetSiteRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetSiteRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetSiteRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetSiteRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetSiteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSiteRequest)
	if !ok {
		that2, ok := that.(GetSiteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateSiteRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateSiteRequest)
	if !ok {
		that2, ok := that.(UpdateSiteRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateSiteRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateSiteRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateSiteRequest but is not nil && this == nil")
	}
	if !this.Site.Equal(&that1.Site) {
		return fmt.Errorf("Site this(%v) Not Equal that(%v)", this.Site, that1.Site)
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return fmt.Errorf("FieldMask this(%v) Not Equal that(%v)", this.FieldMask, that1.FieldMask)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UpdateSiteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSiteRequest)
	if !ok {
		that2, ok := that.(UpdateSiteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Site.Equal(&that1.Site) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteSiteRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteSiteRequest)
	if !ok {
		that2, ok := that.(DeleteSiteRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteSiteRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteSiteRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteSiteRequest but is not nil && this == nil")
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DeleteSiteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteSiteRequest)
	if !ok {
		that2, ok := that.(DeleteSiteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListSitesRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListSitesRequest)
	if !ok {
		that2, ok := that.(ListSitesRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListSitesRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListSitesRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListSitesRequest but is not nil && this == nil")
	}
	if this.Parent != that1.Parent {
		return fmt.Errorf("Parent this(%v) Not Equal that(%v)", this.Parent, that1.Parent)
	}
	if this.PageSize != that1.PageSize {
		return fmt.Errorf("PageSize this(%v) Not Equal that(%v)", this.PageSize, that1.PageSize)
	}
	if this.PageToken != that1.PageToken {
		return fmt.Errorf("PageToken this(%v) Not Equal that(%v)", this.PageToken, that1.PageToken)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ListSitesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListSitesRequest)
	if !ok {
		that2, ok := that.(ListSitesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Parent != that1.Parent {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.PageToken != that1.PageToken {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListSitesResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListSitesResponse)
	if !ok {
		that2, ok := that.(ListSitesResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListSitesResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListSitesResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListSitesResponse but is not nil && this == nil")
	}
	if len(this.Sites) != len(that1.Sites) {
		return fmt.Errorf("Sites this(%v) Not Equal that(%v)", len(this.Sites), len(that1.Sites))
	}
	for i := range this.Sites {
		if !this.Sites[i].Equal(&that1.Sites[i]) {
			return fmt.Errorf("Sites this[%v](%v) Not Equal that[%v](%v)", i, this.Sites[i], i, that1.Sites[i])
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return fmt.Errorf("NextPageToken this(%v) Not Equal that(%v)", this.NextPageToken, that1.NextPageToken)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ListSitesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListSitesResponse)
	if !ok {
		that2, ok := that.(ListSitesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Sites) != len(that1.Sites) {
		return false
	}
	for i := range this.Sites {
		if !this.Sites[i].Equal(&that1.Sites[i]) {
			return false
		}
	}
	if this.NextPageToken != that1.NextPageToken {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Site) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1.Site{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "PrimaryDomain: "+fmt.Sprintf("%#v", this.PrimaryDomain)+",\n")
	s = append(s, "WordpressImage: "+fmt.Sprintf("%#v", this.WordpressImage)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSiteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1.CreateSiteRequest{")
	s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	s = append(s, "Site: "+strings.Replace(this.Site.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetSiteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1.GetSiteRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSiteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1.UpdateSiteRequest{")
	s = append(s, "Site: "+strings.Replace(this.Site.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "FieldMask: "+strings.Replace(this.FieldMask.GoString(), `&`, ``, 1)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteSiteRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&v1.DeleteSiteRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListSitesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&v1.ListSitesRequest{")
	s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "PageToken: "+fmt.Sprintf("%#v", this.PageToken)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListSitesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&v1.ListSitesResponse{")
	if this.Sites != nil {
		vs := make([]*Site, len(this.Sites))
		for i := range vs {
			vs[i] = &this.Sites[i]
		}
		s = append(s, "Sites: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "NextPageToken: "+fmt.Sprintf("%#v", this.NextPageToken)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSite(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SitesServiceClient is the client API for SitesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SitesServiceClient interface {
	// CreateSite creates a new site
	CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*Site, error)
	// GetSite fetches an site by it's name
	GetSite(ctx context.Context, in *GetSiteRequest, opts ...grpc.CallOption) (*Site, error)
	// UpdateSite updates an site details
	UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*Site, error)
	// DeleteSite deletes an site by it's name
	DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// ListSites list sites
	ListSites(ctx context.Context, in *ListSitesRequest, opts ...grpc.CallOption) (*ListSitesResponse, error)
}

type sitesServiceClient struct {
	cc *grpc.ClientConn
}

func NewSitesServiceClient(cc *grpc.ClientConn) SitesServiceClient {
	return &sitesServiceClient{cc}
}

func (c *sitesServiceClient) CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*Site, error) {
	out := new(Site)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.sites.v1.SitesService/CreateSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) GetSite(ctx context.Context, in *GetSiteRequest, opts ...grpc.CallOption) (*Site, error) {
	out := new(Site)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.sites.v1.SitesService/GetSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*Site, error) {
	out := new(Site)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.sites.v1.SitesService/UpdateSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.sites.v1.SitesService/DeleteSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesServiceClient) ListSites(ctx context.Context, in *ListSitesRequest, opts ...grpc.CallOption) (*ListSitesResponse, error) {
	out := new(ListSitesResponse)
	err := c.cc.Invoke(ctx, "/presslabs.dashboard.sites.v1.SitesService/ListSites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SitesServiceServer is the server API for SitesService service.
type SitesServiceServer interface {
	// CreateSite creates a new site
	CreateSite(context.Context, *CreateSiteRequest) (*Site, error)
	// GetSite fetches an site by it's name
	GetSite(context.Context, *GetSiteRequest) (*Site, error)
	// UpdateSite updates an site details
	UpdateSite(context.Context, *UpdateSiteRequest) (*Site, error)
	// DeleteSite deletes an site by it's name
	DeleteSite(context.Context, *DeleteSiteRequest) (*types.Empty, error)
	// ListSites list sites
	ListSites(context.Context, *ListSitesRequest) (*ListSitesResponse, error)
}

func RegisterSitesServiceServer(s *grpc.Server, srv SitesServiceServer) {
	s.RegisterService(&_SitesService_serviceDesc, srv)
}

func _SitesService_CreateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).CreateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.sites.v1.SitesService/CreateSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).CreateSite(ctx, req.(*CreateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_GetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).GetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.sites.v1.SitesService/GetSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).GetSite(ctx, req.(*GetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_UpdateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).UpdateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.sites.v1.SitesService/UpdateSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).UpdateSite(ctx, req.(*UpdateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_DeleteSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).DeleteSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.sites.v1.SitesService/DeleteSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).DeleteSite(ctx, req.(*DeleteSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SitesService_ListSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServiceServer).ListSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/presslabs.dashboard.sites.v1.SitesService/ListSites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServiceServer).ListSites(ctx, req.(*ListSitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SitesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "presslabs.dashboard.sites.v1.SitesService",
	HandlerType: (*SitesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSite",
			Handler:    _SitesService_CreateSite_Handler,
		},
		{
			MethodName: "GetSite",
			Handler:    _SitesService_GetSite_Handler,
		},
		{
			MethodName: "UpdateSite",
			Handler:    _SitesService_UpdateSite_Handler,
		},
		{
			MethodName: "DeleteSite",
			Handler:    _SitesService_DeleteSite_Handler,
		},
		{
			MethodName: "ListSites",
			Handler:    _SitesService_ListSites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "presslabs/dashboard/sites/v1/site.proto",
}

func (m *Site) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Site) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSite(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PrimaryDomain) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSite(dAtA, i, uint64(len(m.PrimaryDomain)))
		i += copy(dAtA[i:], m.PrimaryDomain)
	}
	if len(m.WordpressImage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSite(dAtA, i, uint64(len(m.WordpressImage)))
		i += copy(dAtA[i:], m.WordpressImage)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateSiteRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSiteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Parent) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSite(dAtA, i, uint64(len(m.Parent)))
		i += copy(dAtA[i:], m.Parent)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintSite(dAtA, i, uint64(m.Site.ProtoSize()))
	n1, err := m.Site.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSiteRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSiteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSite(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateSiteRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSiteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSite(dAtA, i, uint64(m.Site.ProtoSize()))
	n2, err := m.Site.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintSite(dAtA, i, uint64(m.FieldMask.ProtoSize()))
	n3, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteSiteRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSiteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSite(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListSitesRequest) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSitesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Parent) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSite(dAtA, i, uint64(len(m.Parent)))
		i += copy(dAtA[i:], m.Parent)
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSite(dAtA, i, uint64(m.PageSize))
	}
	if len(m.PageToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSite(dAtA, i, uint64(len(m.PageToken)))
		i += copy(dAtA[i:], m.PageToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListSitesResponse) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSitesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sites) > 0 {
		for _, msg := range m.Sites {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSite(dAtA, i, uint64(msg.ProtoSize()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.NextPageToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSite(dAtA, i, uint64(len(m.NextPageToken)))
		i += copy(dAtA[i:], m.NextPageToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSite(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSite(r randySite, easy bool) *Site {
	this := &Site{}
	this.Name = string(randStringSite(r))
	this.PrimaryDomain = string(randStringSite(r))
	this.WordpressImage = string(randStringSite(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSite(r, 4)
	}
	return this
}

func NewPopulatedCreateSiteRequest(r randySite, easy bool) *CreateSiteRequest {
	this := &CreateSiteRequest{}
	this.Parent = string(randStringSite(r))
	v1 := NewPopulatedSite(r, easy)
	this.Site = *v1
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSite(r, 3)
	}
	return this
}

func NewPopulatedGetSiteRequest(r randySite, easy bool) *GetSiteRequest {
	this := &GetSiteRequest{}
	this.Name = string(randStringSite(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSite(r, 2)
	}
	return this
}

func NewPopulatedUpdateSiteRequest(r randySite, easy bool) *UpdateSiteRequest {
	this := &UpdateSiteRequest{}
	v2 := NewPopulatedSite(r, easy)
	this.Site = *v2
	v3 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v3
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSite(r, 3)
	}
	return this
}

func NewPopulatedDeleteSiteRequest(r randySite, easy bool) *DeleteSiteRequest {
	this := &DeleteSiteRequest{}
	this.Name = string(randStringSite(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSite(r, 2)
	}
	return this
}

func NewPopulatedListSitesRequest(r randySite, easy bool) *ListSitesRequest {
	this := &ListSitesRequest{}
	this.Parent = string(randStringSite(r))
	this.PageSize = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.PageSize *= -1
	}
	this.PageToken = string(randStringSite(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSite(r, 4)
	}
	return this
}

func NewPopulatedListSitesResponse(r randySite, easy bool) *ListSitesResponse {
	this := &ListSitesResponse{}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Sites = make([]Site, v4)
		for i := 0; i < v4; i++ {
			v5 := NewPopulatedSite(r, easy)
			this.Sites[i] = *v5
		}
	}
	this.NextPageToken = string(randStringSite(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSite(r, 3)
	}
	return this
}

type randySite interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSite(r randySite) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSite(r randySite) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RuneSite(r)
	}
	return string(tmps)
}
func randUnrecognizedSite(r randySite, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSite(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSite(dAtA []byte, r randySite, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSite(dAtA, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		dAtA = encodeVarintPopulateSite(dAtA, uint64(v7))
	case 1:
		dAtA = encodeVarintPopulateSite(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSite(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSite(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSite(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSite(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Site) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSite(uint64(l))
	}
	l = len(m.PrimaryDomain)
	if l > 0 {
		n += 1 + l + sovSite(uint64(l))
	}
	l = len(m.WordpressImage)
	if l > 0 {
		n += 1 + l + sovSite(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateSiteRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovSite(uint64(l))
	}
	l = m.Site.ProtoSize()
	n += 1 + l + sovSite(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSiteRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSite(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSiteRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Site.ProtoSize()
	n += 1 + l + sovSite(uint64(l))
	l = m.FieldMask.ProtoSize()
	n += 1 + l + sovSite(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteSiteRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSite(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSitesRequest) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovSite(uint64(l))
	}
	if m.PageSize != 0 {
		n += 1 + sovSite(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovSite(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSitesResponse) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sites) > 0 {
		for _, e := range m.Sites {
			l = e.ProtoSize()
			n += 1 + l + sovSite(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovSite(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSite(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSite(x uint64) (n int) {
	return sovSite(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Site) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Site: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Site: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordpressImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WordpressImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSiteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSiteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSiteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Site.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSiteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSiteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSiteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSiteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSiteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSiteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Site.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSiteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSiteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSiteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSitesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSitesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSitesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSitesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSite
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSitesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSitesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sites = append(m.Sites, Site{})
			if err := m.Sites[len(m.Sites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSite
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSite
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSite(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSite
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSite(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSite
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSite
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSite
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSite
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSite(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSite = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSite   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("presslabs/dashboard/sites/v1/site.proto", fileDescriptor_site_f521f38883a37528)
}

var fileDescriptor_site_f521f38883a37528 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0xa6, 0x4d, 0xfb, 0xb5, 0xb7, 0x90, 0x92, 0x59, 0x54, 0x91, 0x0b, 0x6e, 0x64, 0x15,
	0xc2, 0x02, 0x6c, 0xa5, 0xec, 0x11, 0x2a, 0x2d, 0x08, 0x09, 0x24, 0x94, 0xd0, 0x0d, 0x2c, 0xa2,
	0x49, 0x7d, 0xe3, 0x0e, 0x89, 0x3d, 0xc6, 0x33, 0x09, 0xb4, 0xbc, 0x0a, 0x0b, 0x96, 0x3c, 0x02,
	0x8f, 0xd0, 0x65, 0x9f, 0xa0, 0x22, 0xe1, 0x05, 0x58, 0x21, 0x96, 0x68, 0xc6, 0xce, 0x4f, 0x93,
	0x2a, 0x89, 0xd8, 0x79, 0xce, 0x3d, 0xf7, 0x9e, 0xfb, 0x73, 0x64, 0x28, 0xc7, 0x09, 0x4a, 0xd9,
	0x66, 0x0d, 0xe9, 0xf9, 0x4c, 0x9e, 0x34, 0x04, 0x4b, 0x7c, 0x4f, 0x72, 0x85, 0xd2, 0xeb, 0x56,
	0xcc, 0x87, 0x1b, 0x27, 0x42, 0x09, 0x7a, 0x7b, 0x48, 0x74, 0x87, 0x44, 0xd7, 0x10, 0xdd, 0x6e,
	0xc5, 0x7a, 0x18, 0x70, 0x75, 0xd2, 0x69, 0xb8, 0xc7, 0x22, 0xf4, 0x02, 0x11, 0x08, 0xcf, 0x24,
	0x35, 0x3a, 0x4d, 0xf3, 0x32, 0x0f, 0xf3, 0x95, 0x16, 0xb3, 0xb6, 0x03, 0x21, 0x82, 0x36, 0x8e,
	0x58, 0x18, 0xc6, 0xea, 0x34, 0x0b, 0x96, 0x26, 0x83, 0x4d, 0x8e, 0x6d, 0xbf, 0x1e, 0x32, 0xd9,
	0x4a, 0x19, 0xce, 0x7b, 0xc8, 0xd5, 0xb8, 0x42, 0x4a, 0x21, 0x17, 0xb1, 0x10, 0x8b, 0xa4, 0x44,
	0xee, 0xaf, 0x57, 0xcd, 0x37, 0xbd, 0x0b, 0xf9, 0x38, 0xe1, 0x21, 0x4b, 0x4e, 0xeb, 0xbe, 0x08,
	0x19, 0x8f, 0x8a, 0x4b, 0x26, 0x7a, 0x33, 0x43, 0x0f, 0x0c, 0x48, 0xcb, 0xb0, 0xf9, 0x51, 0x24,
	0xbe, 0x19, 0xaa, 0xce, 0x43, 0x16, 0x60, 0x71, 0xd9, 0xf0, 0xf2, 0x43, 0xf8, 0x85, 0x46, 0x9d,
	0x10, 0x0a, 0x4f, 0x13, 0x64, 0x0a, 0xb5, 0x62, 0x15, 0x3f, 0x74, 0x50, 0x2a, 0xba, 0x05, 0xab,
	0x31, 0x4b, 0x30, 0x52, 0x99, 0x74, 0xf6, 0xa2, 0x4f, 0x20, 0xa7, 0x57, 0x62, 0x24, 0x37, 0xf6,
	0x1c, 0x77, 0xd6, 0xce, 0x5c, 0x5d, 0x70, 0x7f, 0xed, 0xfc, 0x72, 0xe7, 0xbf, 0x8b, 0xcb, 0x1d,
	0x52, 0x35, 0x99, 0xce, 0x2e, 0xe4, 0x9f, 0xa3, 0x1a, 0xd7, 0xba, 0x66, 0x48, 0xe7, 0x0b, 0x81,
	0xc2, 0x51, 0xec, 0x4f, 0x74, 0x35, 0x50, 0x27, 0xff, 0xaa, 0x4e, 0x0f, 0x61, 0xa3, 0x63, 0xca,
	0x9a, 0x6d, 0x67, 0x63, 0x58, 0x6e, 0x7a, 0x10, 0x77, 0x70, 0x10, 0xf7, 0x99, 0x3e, 0xc8, 0x2b,
	0x26, 0x5b, 0x63, 0x05, 0x20, 0x4d, 0xd4, 0xa8, 0x53, 0x86, 0xc2, 0x01, 0xb6, 0xf1, 0x6a, 0x77,
	0xd7, 0xcd, 0xd1, 0x84, 0x5b, 0x2f, 0xb9, 0x34, 0xe3, 0xca, 0x79, 0xbb, 0xdd, 0x86, 0xf5, 0x98,
	0x05, 0x58, 0x97, 0xfc, 0x2c, 0x5d, 0xf0, 0x4a, 0x75, 0x4d, 0x03, 0x35, 0x7e, 0x86, 0xf4, 0x0e,
	0x80, 0x09, 0x2a, 0xd1, 0xc2, 0x28, 0xbb, 0xa4, 0xa1, 0xbf, 0xd1, 0x80, 0xf3, 0x19, 0x0a, 0x63,
	0x3a, 0x32, 0x16, 0x91, 0x44, 0xfa, 0x18, 0x56, 0xcc, 0x36, 0x8a, 0xa4, 0xb4, 0xbc, 0xe0, 0xbe,
	0x72, 0x7a, 0xdc, 0x6a, 0x9a, 0x46, 0xef, 0xc1, 0x66, 0x84, 0x9f, 0x54, 0x7d, 0x4c, 0x38, 0xb3,
	0x9a, 0x86, 0x5f, 0x0f, 0xc4, 0xf7, 0x7e, 0x2f, 0xc3, 0x0d, 0xa3, 0x5c, 0xc3, 0xa4, 0xcb, 0x8f,
	0x91, 0x32, 0x80, 0x91, 0xa5, 0xa8, 0x37, 0x5b, 0x77, 0xca, 0x7c, 0xd6, 0x02, 0x8d, 0xd2, 0x77,
	0xf0, 0x7f, 0x66, 0x23, 0xfa, 0x60, 0x36, 0xfd, 0xaa, 0xdb, 0x16, 0x2a, 0xce, 0x00, 0x46, 0xe6,
	0x9b, 0xd7, 0xff, 0x94, 0x4d, 0x17, 0x92, 0x38, 0x02, 0x18, 0x39, 0x68, 0x9e, 0xc4, 0x94, 0xd7,
	0xac, 0xad, 0x29, 0xcb, 0x1e, 0xea, 0x1f, 0x0c, 0x6d, 0xc3, 0xfa, 0xd0, 0x07, 0xd4, 0x9d, 0x5d,
	0x75, 0xd2, 0x98, 0x96, 0xb7, 0x30, 0x3f, 0x35, 0xd8, 0xfe, 0xee, 0x8f, 0x9e, 0x4d, 0x7e, 0xf5,
	0x6c, 0xf2, 0xa7, 0x67, 0x93, 0x6f, 0x7d, 0x9b, 0x7c, 0xef, 0xdb, 0xe4, 0xbc, 0x6f, 0x93, 0x8b,
	0xbe, 0x4d, 0xbe, 0xfe, 0xb4, 0xc9, 0xdb, 0xa5, 0x6e, 0xa5, 0xb1, 0x6a, 0x7a, 0x7c, 0xf4, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x16, 0x2c, 0x12, 0x21, 0x8a, 0x05, 0x00, 0x00,
}
